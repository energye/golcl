//----------------------------------------
// The code is automatically generated by the GenlibLcl tool.
// Copyright © ying32. All Rights Reserved.
//
// Licensed under Apache License 2.0
//
//----------------------------------------

package lcl

import (
	. "github.com/energye/golcl/lcl/api"
	. "github.com/energye/golcl/lcl/types"
	"unsafe"
)

type TListItem struct {
	IObject
	instance unsafe.Pointer
}

// NewListItem
//
// 创建一个新的对象。
//
// Create a new object.
func NewListItem(AOwner *TListItems) *TListItem {
	l := new(TListItem)
	l.instance = unsafe.Pointer(ListItem_Create(CheckPtr(AOwner)))
	setFinalizer(l, (*TListItem).Free)
	return l
}

// AsListItem
//
// 动态转换一个已存在的对象实例。
//
// Dynamically convert an existing object instance.
func AsListItem(obj interface{}) *TListItem {
	instance := getInstance(obj)
	if instance == nullptr {
		return nil
	}
	return &TListItem{instance: instance}
}

// Free
//
// 释放对象。
//
// Free object.
func (l *TListItem) Free() {
	if l.instance != nullptr {
		ListItem_Free(l._instance())
		l.instance = nullptr
	}
}

func (l *TListItem) _instance() uintptr {
	return uintptr(l.instance)
}

// Instance
//
// 返回对象实例指针。
//
// Return object instance pointer.
func (l *TListItem) Instance() uintptr {
	return l._instance()
}

// UnsafeAddr
//
// 获取一个不安全的地址。
//
// Get an unsafe address.
func (l *TListItem) UnsafeAddr() unsafe.Pointer {
	return l.instance
}

// IsValid
//
// 检测地址是否为空。
//
// Check if the address is empty.
func (l *TListItem) IsValid() bool {
	return l.instance != nullptr
}

// Is
//
// 检测当前对象是否继承自目标对象。
//
// Checks whether the current object is inherited from the target object.
func (l *TListItem) Is() TIs {
	return TIs(l._instance())
}

// As
//
// 动态转换当前对象为目标对象。
//
// Dynamically convert the current object to the target object.
//func (l *TListItem) As() TAs {
//    return TAs(l._instance())
//}

// TListItemClass
//
// 获取类信息指针。
//
// Get class information pointer.
func TListItemClass() TClass {
	return ListItem_StaticClassType()
}

func (l *TListItem) DisplayRectSubItem(subItem int32, Code TDisplayCode) TRect {
	return ListItem_DisplayRectSubItem(l._instance(), subItem, Code)
}

// Assign
//
// 复制一个对象，如果对象实现了此方法的话。
//
// Copy an object, if the object implements this method.
func (l *TListItem) Assign(Source IObject) {
	ListItem_Assign(l._instance(), CheckPtr(Source))
}

func (l *TListItem) Delete() {
	ListItem_Delete(l._instance())
}

func (l *TListItem) DisplayRect(Code TDisplayCode) TRect {
	return ListItem_DisplayRect(l._instance(), Code)
}

func (l *TListItem) EditCaption() bool {
	return ListItem_EditCaption(l._instance())
}

func (l *TListItem) MakeVisible(PartialOK bool) {
	ListItem_MakeVisible(l._instance(), PartialOK)
}

// GetNamePath
//
// 获取类名路径。
//
// Get the class name path.
func (l *TListItem) GetNamePath() string {
	return ListItem_GetNamePath(l._instance())
}

// ClassType
//
// 获取类的类型信息。
//
// Get class type information.
func (l *TListItem) ClassType() TClass {
	return ListItem_ClassType(l._instance())
}

// ClassName
//
// 获取当前对象类名称。
//
// Get the current object class name.
func (l *TListItem) ClassName() string {
	return ListItem_ClassName(l._instance())
}

// InstanceSize
//
// 获取当前对象实例大小。
//
// Get the current object instance size.
func (l *TListItem) InstanceSize() int32 {
	return ListItem_InstanceSize(l._instance())
}

// InheritsFrom
//
// 判断当前类是否继承自指定类。
//
// Determine whether the current class inherits from the specified class.
func (l *TListItem) InheritsFrom(AClass TClass) bool {
	return ListItem_InheritsFrom(l._instance(), AClass)
}

// Equals
//
// 与一个对象进行比较。
//
// Compare with an object.
func (l *TListItem) Equals(Obj IObject) bool {
	return ListItem_Equals(l._instance(), CheckPtr(Obj))
}

// GetHashCode
//
// 获取类的哈希值。
//
// Get the hash value of the class.
func (l *TListItem) GetHashCode() int32 {
	return ListItem_GetHashCode(l._instance())
}

// ToString
//
// 文本类信息。
//
// Text information.
func (l *TListItem) ToString() string {
	return ListItem_ToString(l._instance())
}

func (l *TListItem) DropTarget() bool {
	return ListItem_GetDropTarget(l._instance())
}

func (l *TListItem) SetDropTarget(value bool) {
	ListItem_SetDropTarget(l._instance(), value)
}

// Caption
//
// 获取控件标题。
//
// Get the control title.
func (l *TListItem) Caption() string {
	return ListItem_GetCaption(l._instance())
}

// SetCaption
//
// 设置控件标题。
//
// Set the control title.
func (l *TListItem) SetCaption(value string) {
	ListItem_SetCaption(l._instance(), value)
}

// Checked
//
// 获取是否选中。
func (l *TListItem) Checked() bool {
	return ListItem_GetChecked(l._instance())
}

// SetChecked
//
// 设置是否选中。
func (l *TListItem) SetChecked(value bool) {
	ListItem_SetChecked(l._instance(), value)
}

func (l *TListItem) Cut() bool {
	return ListItem_GetCut(l._instance())
}

func (l *TListItem) SetCut(value bool) {
	ListItem_SetCut(l._instance(), value)
}

func (l *TListItem) Data() unsafe.Pointer {
	return ListItem_GetData(l._instance())
}

func (l *TListItem) SetData(value unsafe.Pointer) {
	ListItem_SetData(l._instance(), value)
}

// Focused
//
// 获取返回是否获取焦点。
//
// Get Return to get focus.
func (l *TListItem) Focused() bool {
	return ListItem_GetFocused(l._instance())
}

// SetFocused
//
// 设置返回是否获取焦点。
//
// Set Return to get focus.
func (l *TListItem) SetFocused(value bool) {
	ListItem_SetFocused(l._instance(), value)
}

// ImageIndex
//
// 获取图像在images中的索引。
func (l *TListItem) ImageIndex() int32 {
	return ListItem_GetImageIndex(l._instance())
}

// SetImageIndex
//
// 设置图像在images中的索引。
func (l *TListItem) SetImageIndex(value int32) {
	ListItem_SetImageIndex(l._instance(), value)
}

func (l *TListItem) Index() int32 {
	return ListItem_GetIndex(l._instance())
}

// Left
//
// 获取左边位置。
//
// Get Left position.
func (l *TListItem) Left() int32 {
	return ListItem_GetLeft(l._instance())
}

// SetLeft
//
// 设置左边位置。
//
// Set Left position.
func (l *TListItem) SetLeft(value int32) {
	ListItem_SetLeft(l._instance(), value)
}

func (l *TListItem) ListView() *TWinControl {
	return AsWinControl(ListItem_GetListView(l._instance()))
}

// Owner
//
// 获取组件所有者。
//
// Get component owner.
func (l *TListItem) Owner() *TListItems {
	return AsListItems(ListItem_GetOwner(l._instance()))
}

func (l *TListItem) Position() TPoint {
	return ListItem_GetPosition(l._instance())
}

func (l *TListItem) SetPosition(value TPoint) {
	ListItem_SetPosition(l._instance(), value)
}

func (l *TListItem) Selected() bool {
	return ListItem_GetSelected(l._instance())
}

func (l *TListItem) SetSelected(value bool) {
	ListItem_SetSelected(l._instance(), value)
}

func (l *TListItem) StateIndex() int32 {
	return ListItem_GetStateIndex(l._instance())
}

func (l *TListItem) SetStateIndex(value int32) {
	ListItem_SetStateIndex(l._instance(), value)
}

func (l *TListItem) SubItems() *TStrings {
	return AsStrings(ListItem_GetSubItems(l._instance()))
}

func (l *TListItem) SetSubItems(value IStrings) {
	ListItem_SetSubItems(l._instance(), CheckPtr(value))
}

// Top
//
// 获取顶边位置。
//
// Get Top position.
func (l *TListItem) Top() int32 {
	return ListItem_GetTop(l._instance())
}

// SetTop
//
// 设置顶边位置。
//
// Set Top position.
func (l *TListItem) SetTop(value int32) {
	ListItem_SetTop(l._instance(), value)
}

func (l *TListItem) SubItemImages(Index int32) int32 {
	return ListItem_GetSubItemImages(l._instance(), Index)
}

func (l *TListItem) SetSubItemImages(Index int32, value int32) {
	ListItem_SetSubItemImages(l._instance(), Index, value)
}
