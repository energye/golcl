//----------------------------------------
// The code is automatically generated by the GenlibLcl tool.
// Copyright © ying32. All Rights Reserved.
//
// Licensed under Apache License 2.0
//
//----------------------------------------

package lcl

import (
	. "github.com/energye/golcl/lcl/api"
	. "github.com/energye/golcl/lcl/types"
	"time"
	"unsafe"
)

type TDateTimePicker struct {
	IWinControl
	instance unsafe.Pointer
}

// NewDateTimePicker
//
// 创建一个新的对象。
//
// Create a new object.
func NewDateTimePicker(owner IComponent) *TDateTimePicker {
	d := new(TDateTimePicker)
	d.instance = unsafe.Pointer(DateTimePicker_Create(CheckPtr(owner)))
	return d
}

// AsDateTimePicker
//
// 动态转换一个已存在的对象实例。
//
// Dynamically convert an existing object instance.
func AsDateTimePicker(obj interface{}) *TDateTimePicker {
	instance := getInstance(obj)
	if instance == nullptr {
		return nil
	}
	return &TDateTimePicker{instance: instance}
}

// Free
//
// 释放对象。
//
// Free object.
func (d *TDateTimePicker) Free() {
	if d.instance != nullptr {
		DateTimePicker_Free(d._instance())
		d.instance = nullptr
	}
}

func (d *TDateTimePicker) _instance() uintptr {
	return uintptr(d.instance)
}

// Instance
//
// 返回对象实例指针。
//
// Return object instance pointer.
func (d *TDateTimePicker) Instance() uintptr {
	return d._instance()
}

// UnsafeAddr
//
// 获取一个不安全的地址。
//
// Get an unsafe address.
func (d *TDateTimePicker) UnsafeAddr() unsafe.Pointer {
	return d.instance
}

// IsValid
//
// 检测地址是否为空。
//
// Check if the address is empty.
func (d *TDateTimePicker) IsValid() bool {
	return d.instance != nullptr
}

// Is
//
// 检测当前对象是否继承自目标对象。
//
// Checks whether the current object is inherited from the target object.
func (d *TDateTimePicker) Is() TIs {
	return TIs(d._instance())
}

// As
//
// 动态转换当前对象为目标对象。
//
// Dynamically convert the current object to the target object.
//func (d *TDateTimePicker) As() TAs {
//    return TAs(d._instance())
//}

// TDateTimePickerClass
//
// 获取类信息指针。
//
// Get class information pointer.
func TDateTimePickerClass() TClass {
	return DateTimePicker_StaticClassType()
}

func (d *TDateTimePicker) DateIsNull() bool {
	return DateTimePicker_DateIsNull(d._instance())
}

func (d *TDateTimePicker) SelectDate() {
	DateTimePicker_SelectDate(d._instance())
}

func (d *TDateTimePicker) SelectTime() {
	DateTimePicker_SelectTime(d._instance())
}

// CanFocus
//
// 是否可以获得焦点。
func (d *TDateTimePicker) CanFocus() bool {
	return DateTimePicker_CanFocus(d._instance())
}

// ContainsControl
//
// 返回是否包含指定控件。
//
// it's contain a specified control.
func (d *TDateTimePicker) ContainsControl(Control IControl) bool {
	return DateTimePicker_ContainsControl(d._instance(), CheckPtr(Control))
}

// ControlAtPos
//
// 返回指定坐标及相关属性位置控件。
//
// Returns the specified coordinate and the relevant attribute position control..
func (d *TDateTimePicker) ControlAtPos(Pos TPoint, AllowDisabled bool, AllowWinControls bool, AllLevels bool) *TControl {
	return AsControl(DateTimePicker_ControlAtPos(d._instance(), Pos, AllowDisabled, AllowWinControls, AllLevels))
}

// DisableAlign
//
// 禁用控件的对齐。
//
// Disable control alignment.
func (d *TDateTimePicker) DisableAlign() {
	DateTimePicker_DisableAlign(d._instance())
}

// EnableAlign
//
// 启用控件对齐。
//
// Enabled control alignment.
func (d *TDateTimePicker) EnableAlign() {
	DateTimePicker_EnableAlign(d._instance())
}

// FindChildControl
//
// 查找子控件。
//
// Find sub controls.
func (d *TDateTimePicker) FindChildControl(ControlName string) *TControl {
	return AsControl(DateTimePicker_FindChildControl(d._instance(), ControlName))
}

func (d *TDateTimePicker) FlipChildren(AllLevels bool) {
	DateTimePicker_FlipChildren(d._instance(), AllLevels)
}

// Focused
//
// 返回是否获取焦点。
//
// Return to get focus.
func (d *TDateTimePicker) Focused() bool {
	return DateTimePicker_Focused(d._instance())
}

// HandleAllocated
//
// 句柄是否已经分配。
//
// Is the handle already allocated.
func (d *TDateTimePicker) HandleAllocated() bool {
	return DateTimePicker_HandleAllocated(d._instance())
}

// InsertControl
//
// 插入一个控件。
//
// Insert a control.
func (d *TDateTimePicker) InsertControl(AControl IControl) {
	DateTimePicker_InsertControl(d._instance(), CheckPtr(AControl))
}

// Invalidate
//
// 要求重绘。
//
// Redraw.
func (d *TDateTimePicker) Invalidate() {
	DateTimePicker_Invalidate(d._instance())
}

// PaintTo
//
// 绘画至指定DC。
//
// Painting to the specified DC.
func (d *TDateTimePicker) PaintTo(DC HDC, X int32, Y int32) {
	DateTimePicker_PaintTo(d._instance(), DC, X, Y)
}

// RemoveControl
//
// 移除一个控件。
//
// Remove a control.
func (d *TDateTimePicker) RemoveControl(AControl IControl) {
	DateTimePicker_RemoveControl(d._instance(), CheckPtr(AControl))
}

// Realign
//
// 重新对齐。
//
// Realign.
func (d *TDateTimePicker) Realign() {
	DateTimePicker_Realign(d._instance())
}

// Repaint
//
// 重绘。
//
// Repaint.
func (d *TDateTimePicker) Repaint() {
	DateTimePicker_Repaint(d._instance())
}

// ScaleBy
//
// 按比例缩放。
//
// Scale by.
func (d *TDateTimePicker) ScaleBy(M int32, D int32) {
	DateTimePicker_ScaleBy(d._instance(), M, D)
}

// ScrollBy
//
// 滚动至指定位置。
//
// Scroll by.
func (d *TDateTimePicker) ScrollBy(DeltaX int32, DeltaY int32) {
	DateTimePicker_ScrollBy(d._instance(), DeltaX, DeltaY)
}

// SetBounds
//
// 设置组件边界。
//
// Set component boundaries.
func (d *TDateTimePicker) SetBounds(ALeft int32, ATop int32, AWidth int32, AHeight int32) {
	DateTimePicker_SetBounds(d._instance(), ALeft, ATop, AWidth, AHeight)
}

// SetFocus
//
// 设置控件焦点。
//
// Set control focus.
func (d *TDateTimePicker) SetFocus() {
	DateTimePicker_SetFocus(d._instance())
}

// Update
//
// 控件更新。
//
// Update.
func (d *TDateTimePicker) Update() {
	DateTimePicker_Update(d._instance())
}

// BringToFront
//
// 将控件置于最前。
//
// Bring the control to the front.
func (d *TDateTimePicker) BringToFront() {
	DateTimePicker_BringToFront(d._instance())
}

// ClientToScreen
//
// 将客户端坐标转为绝对的屏幕坐标。
//
// Convert client coordinates to absolute screen coordinates.
func (d *TDateTimePicker) ClientToScreen(Point TPoint) TPoint {
	return DateTimePicker_ClientToScreen(d._instance(), Point)
}

// ClientToParent
//
// 将客户端坐标转为父容器坐标。
//
// Convert client coordinates to parent container coordinates.
func (d *TDateTimePicker) ClientToParent(Point TPoint, AParent IWinControl) TPoint {
	return DateTimePicker_ClientToParent(d._instance(), Point, CheckPtr(AParent))
}

// Dragging
//
// 是否在拖拽中。
//
// Is it in the middle of dragging.
func (d *TDateTimePicker) Dragging() bool {
	return DateTimePicker_Dragging(d._instance())
}

// HasParent
//
// 是否有父容器。
//
// Is there a parent container.
func (d *TDateTimePicker) HasParent() bool {
	return DateTimePicker_HasParent(d._instance())
}

// Hide
//
// 隐藏控件。
//
// Hidden control.
func (d *TDateTimePicker) Hide() {
	DateTimePicker_Hide(d._instance())
}

// Perform
//
// 发送一个消息。
//
// Send a message.
func (d *TDateTimePicker) Perform(Msg uint32, WParam uintptr, LParam int) int {
	return DateTimePicker_Perform(d._instance(), Msg, WParam, LParam)
}

// Refresh
//
// 刷新控件。
//
// Refresh control.
func (d *TDateTimePicker) Refresh() {
	DateTimePicker_Refresh(d._instance())
}

// ScreenToClient
//
// 将屏幕坐标转为客户端坐标。
//
// Convert screen coordinates to client coordinates.
func (d *TDateTimePicker) ScreenToClient(Point TPoint) TPoint {
	return DateTimePicker_ScreenToClient(d._instance(), Point)
}

// ParentToClient
//
// 将父容器坐标转为客户端坐标。
//
// Convert parent container coordinates to client coordinates.
func (d *TDateTimePicker) ParentToClient(Point TPoint, AParent IWinControl) TPoint {
	return DateTimePicker_ParentToClient(d._instance(), Point, CheckPtr(AParent))
}

// SendToBack
//
// 控件至于最后面。
//
// The control is placed at the end.
func (d *TDateTimePicker) SendToBack() {
	DateTimePicker_SendToBack(d._instance())
}

// Show
//
// 显示控件。
//
// Show control.
func (d *TDateTimePicker) Show() {
	DateTimePicker_Show(d._instance())
}

// GetTextBuf
//
// 获取控件的字符，如果有。
//
// Get the characters of the control, if any.
func (d *TDateTimePicker) GetTextBuf(Buffer *string, BufSize int32) int32 {
	return DateTimePicker_GetTextBuf(d._instance(), Buffer, BufSize)
}

// GetTextLen
//
// 获取控件的字符长，如果有。
//
// Get the character length of the control, if any.
func (d *TDateTimePicker) GetTextLen() int32 {
	return DateTimePicker_GetTextLen(d._instance())
}

// SetTextBuf
//
// 设置控件字符，如果有。
//
// Set control characters, if any.
func (d *TDateTimePicker) SetTextBuf(Buffer string) {
	DateTimePicker_SetTextBuf(d._instance(), Buffer)
}

// FindComponent
//
// 查找指定名称的组件。
//
// Find the component with the specified name.
func (d *TDateTimePicker) FindComponent(AName string) *TComponent {
	return AsComponent(DateTimePicker_FindComponent(d._instance(), AName))
}

// GetNamePath
//
// 获取类名路径。
//
// Get the class name path.
func (d *TDateTimePicker) GetNamePath() string {
	return DateTimePicker_GetNamePath(d._instance())
}

// Assign
//
// 复制一个对象，如果对象实现了此方法的话。
//
// Copy an object, if the object implements this method.
func (d *TDateTimePicker) Assign(Source IObject) {
	DateTimePicker_Assign(d._instance(), CheckPtr(Source))
}

// ClassType
//
// 获取类的类型信息。
//
// Get class type information.
func (d *TDateTimePicker) ClassType() TClass {
	return DateTimePicker_ClassType(d._instance())
}

// ClassName
//
// 获取当前对象类名称。
//
// Get the current object class name.
func (d *TDateTimePicker) ClassName() string {
	return DateTimePicker_ClassName(d._instance())
}

// InstanceSize
//
// 获取当前对象实例大小。
//
// Get the current object instance size.
func (d *TDateTimePicker) InstanceSize() int32 {
	return DateTimePicker_InstanceSize(d._instance())
}

// InheritsFrom
//
// 判断当前类是否继承自指定类。
//
// Determine whether the current class inherits from the specified class.
func (d *TDateTimePicker) InheritsFrom(AClass TClass) bool {
	return DateTimePicker_InheritsFrom(d._instance(), AClass)
}

// Equals
//
// 与一个对象进行比较。
//
// Compare with an object.
func (d *TDateTimePicker) Equals(Obj IObject) bool {
	return DateTimePicker_Equals(d._instance(), CheckPtr(Obj))
}

// GetHashCode
//
// 获取类的哈希值。
//
// Get the hash value of the class.
func (d *TDateTimePicker) GetHashCode() int32 {
	return DateTimePicker_GetHashCode(d._instance())
}

// ToString
//
// 文本类信息。
//
// Text information.
func (d *TDateTimePicker) ToString() string {
	return DateTimePicker_ToString(d._instance())
}

func (d *TDateTimePicker) AnchorToNeighbour(ASide TAnchorKind, ASpace int32, ASibling IControl) {
	DateTimePicker_AnchorToNeighbour(d._instance(), ASide, ASpace, CheckPtr(ASibling))
}

func (d *TDateTimePicker) AnchorParallel(ASide TAnchorKind, ASpace int32, ASibling IControl) {
	DateTimePicker_AnchorParallel(d._instance(), ASide, ASpace, CheckPtr(ASibling))
}

// AnchorHorizontalCenterTo
//
// 置于指定控件的横向中心。
func (d *TDateTimePicker) AnchorHorizontalCenterTo(ASibling IControl) {
	DateTimePicker_AnchorHorizontalCenterTo(d._instance(), CheckPtr(ASibling))
}

// AnchorVerticalCenterTo
//
// 置于指定控件的纵向中心。
func (d *TDateTimePicker) AnchorVerticalCenterTo(ASibling IControl) {
	DateTimePicker_AnchorVerticalCenterTo(d._instance(), CheckPtr(ASibling))
}

func (d *TDateTimePicker) AnchorSame(ASide TAnchorKind, ASibling IControl) {
	DateTimePicker_AnchorSame(d._instance(), ASide, CheckPtr(ASibling))
}

func (d *TDateTimePicker) AnchorAsAlign(ATheAlign TAlign, ASpace int32) {
	DateTimePicker_AnchorAsAlign(d._instance(), ATheAlign, ASpace)
}

func (d *TDateTimePicker) AnchorClient(ASpace int32) {
	DateTimePicker_AnchorClient(d._instance(), ASpace)
}

func (d *TDateTimePicker) ScaleDesignToForm(ASize int32) int32 {
	return DateTimePicker_ScaleDesignToForm(d._instance(), ASize)
}

func (d *TDateTimePicker) ScaleFormToDesign(ASize int32) int32 {
	return DateTimePicker_ScaleFormToDesign(d._instance(), ASize)
}

func (d *TDateTimePicker) Scale96ToForm(ASize int32) int32 {
	return DateTimePicker_Scale96ToForm(d._instance(), ASize)
}

func (d *TDateTimePicker) ScaleFormTo96(ASize int32) int32 {
	return DateTimePicker_ScaleFormTo96(d._instance(), ASize)
}

func (d *TDateTimePicker) Scale96ToFont(ASize int32) int32 {
	return DateTimePicker_Scale96ToFont(d._instance(), ASize)
}

func (d *TDateTimePicker) ScaleFontTo96(ASize int32) int32 {
	return DateTimePicker_ScaleFontTo96(d._instance(), ASize)
}

func (d *TDateTimePicker) ScaleScreenToFont(ASize int32) int32 {
	return DateTimePicker_ScaleScreenToFont(d._instance(), ASize)
}

func (d *TDateTimePicker) ScaleFontToScreen(ASize int32) int32 {
	return DateTimePicker_ScaleFontToScreen(d._instance(), ASize)
}

func (d *TDateTimePicker) Scale96ToScreen(ASize int32) int32 {
	return DateTimePicker_Scale96ToScreen(d._instance(), ASize)
}

func (d *TDateTimePicker) ScaleScreenTo96(ASize int32) int32 {
	return DateTimePicker_ScaleScreenTo96(d._instance(), ASize)
}

func (d *TDateTimePicker) AutoAdjustLayout(AMode TLayoutAdjustmentPolicy, AFromPPI int32, AToPPI int32, AOldFormWidth int32, ANewFormWidth int32) {
	DateTimePicker_AutoAdjustLayout(d._instance(), AMode, AFromPPI, AToPPI, AOldFormWidth, ANewFormWidth)
}

func (d *TDateTimePicker) FixDesignFontsPPI(ADesignTimePPI int32) {
	DateTimePicker_FixDesignFontsPPI(d._instance(), ADesignTimePPI)
}

func (d *TDateTimePicker) ScaleFontsPPI(AToPPI int32, AProportion float64) {
	DateTimePicker_ScaleFontsPPI(d._instance(), AToPPI, AProportion)
}

func (d *TDateTimePicker) ArrowShape() TArrowShape {
	return DateTimePicker_GetArrowShape(d._instance())
}

func (d *TDateTimePicker) SetArrowShape(value TArrowShape) {
	DateTimePicker_SetArrowShape(d._instance(), value)
}

func (d *TDateTimePicker) AutoAdvance() bool {
	return DateTimePicker_GetAutoAdvance(d._instance())
}

func (d *TDateTimePicker) SetAutoAdvance(value bool) {
	DateTimePicker_SetAutoAdvance(d._instance(), value)
}

func (d *TDateTimePicker) AutoButtonSize() bool {
	return DateTimePicker_GetAutoButtonSize(d._instance())
}

func (d *TDateTimePicker) SetAutoButtonSize(value bool) {
	DateTimePicker_SetAutoButtonSize(d._instance(), value)
}

func (d *TDateTimePicker) Cascade() bool {
	return DateTimePicker_GetCascade(d._instance())
}

func (d *TDateTimePicker) SetCascade(value bool) {
	DateTimePicker_SetCascade(d._instance(), value)
}

func (d *TDateTimePicker) CenturyFrom() uint16 {
	return DateTimePicker_GetCenturyFrom(d._instance())
}

func (d *TDateTimePicker) SetCenturyFrom(value uint16) {
	DateTimePicker_SetCenturyFrom(d._instance(), value)
}

func (d *TDateTimePicker) DateDisplayOrder() TDateDisplayOrder {
	return DateTimePicker_GetDateDisplayOrder(d._instance())
}

func (d *TDateTimePicker) SetDateDisplayOrder(value TDateDisplayOrder) {
	DateTimePicker_SetDateDisplayOrder(d._instance(), value)
}

func (d *TDateTimePicker) DateSeparator() string {
	return DateTimePicker_GetDateSeparator(d._instance())
}

func (d *TDateTimePicker) SetDateSeparator(value string) {
	DateTimePicker_SetDateSeparator(d._instance(), value)
}

func (d *TDateTimePicker) HideDateTimeParts() TDateTimeParts {
	return DateTimePicker_GetHideDateTimeParts(d._instance())
}

func (d *TDateTimePicker) SetHideDateTimeParts(value TDateTimeParts) {
	DateTimePicker_SetHideDateTimeParts(d._instance(), value)
}

func (d *TDateTimePicker) LeadingZeros() bool {
	return DateTimePicker_GetLeadingZeros(d._instance())
}

func (d *TDateTimePicker) SetLeadingZeros(value bool) {
	DateTimePicker_SetLeadingZeros(d._instance(), value)
}

func (d *TDateTimePicker) MonthNames() string {
	return DateTimePicker_GetMonthNames(d._instance())
}

func (d *TDateTimePicker) SetMonthNames(value string) {
	DateTimePicker_SetMonthNames(d._instance(), value)
}

func (d *TDateTimePicker) ShowMonthNames() bool {
	return DateTimePicker_GetShowMonthNames(d._instance())
}

func (d *TDateTimePicker) SetShowMonthNames(value bool) {
	DateTimePicker_SetShowMonthNames(d._instance(), value)
}

func (d *TDateTimePicker) NullInputAllowed() bool {
	return DateTimePicker_GetNullInputAllowed(d._instance())
}

func (d *TDateTimePicker) SetNullInputAllowed(value bool) {
	DateTimePicker_SetNullInputAllowed(d._instance(), value)
}

func (d *TDateTimePicker) Options() TDateTimePickerOptions {
	return DateTimePicker_GetOptions(d._instance())
}

func (d *TDateTimePicker) SetOptions(value TDateTimePickerOptions) {
	DateTimePicker_SetOptions(d._instance(), value)
}

func (d *TDateTimePicker) ShowCheckBox() bool {
	return DateTimePicker_GetShowCheckBox(d._instance())
}

func (d *TDateTimePicker) SetShowCheckBox(value bool) {
	DateTimePicker_SetShowCheckBox(d._instance(), value)
}

// ReadOnly
//
// 获取只读。
func (d *TDateTimePicker) ReadOnly() bool {
	return DateTimePicker_GetReadOnly(d._instance())
}

// SetReadOnly
//
// 设置只读。
func (d *TDateTimePicker) SetReadOnly(value bool) {
	DateTimePicker_SetReadOnly(d._instance(), value)
}

func (d *TDateTimePicker) TextForNullDate() string {
	return DateTimePicker_GetTextForNullDate(d._instance())
}

func (d *TDateTimePicker) SetTextForNullDate(value string) {
	DateTimePicker_SetTextForNullDate(d._instance(), value)
}

func (d *TDateTimePicker) TimeDisplay() TTimeDisplay {
	return DateTimePicker_GetTimeDisplay(d._instance())
}

func (d *TDateTimePicker) SetTimeDisplay(value TTimeDisplay) {
	DateTimePicker_SetTimeDisplay(d._instance(), value)
}

func (d *TDateTimePicker) TimeFormat() TTimeFormat {
	return DateTimePicker_GetTimeFormat(d._instance())
}

func (d *TDateTimePicker) SetTimeFormat(value TTimeFormat) {
	DateTimePicker_SetTimeFormat(d._instance(), value)
}

func (d *TDateTimePicker) TimeSeparator() string {
	return DateTimePicker_GetTimeSeparator(d._instance())
}

func (d *TDateTimePicker) SetTimeSeparator(value string) {
	DateTimePicker_SetTimeSeparator(d._instance(), value)
}

func (d *TDateTimePicker) TrailingSeparator() bool {
	return DateTimePicker_GetTrailingSeparator(d._instance())
}

func (d *TDateTimePicker) SetTrailingSeparator(value bool) {
	DateTimePicker_SetTrailingSeparator(d._instance(), value)
}

func (d *TDateTimePicker) UseDefaultSeparators() bool {
	return DateTimePicker_GetUseDefaultSeparators(d._instance())
}

func (d *TDateTimePicker) SetUseDefaultSeparators(value bool) {
	DateTimePicker_SetUseDefaultSeparators(d._instance(), value)
}

func (d *TDateTimePicker) DroppedDown() bool {
	return DateTimePicker_GetDroppedDown(d._instance())
}

func (d *TDateTimePicker) DateTime() time.Time {
	return DateTimePicker_GetDateTime(d._instance())
}

func (d *TDateTimePicker) SetDateTime(value time.Time) {
	DateTimePicker_SetDateTime(d._instance(), value)
}

// Align
//
// 获取控件自动调整。
//
// Get Control automatically adjusts.
func (d *TDateTimePicker) Align() TAlign {
	return DateTimePicker_GetAlign(d._instance())
}

// SetAlign
//
// 设置控件自动调整。
//
// Set Control automatically adjusts.
func (d *TDateTimePicker) SetAlign(value TAlign) {
	DateTimePicker_SetAlign(d._instance(), value)
}

// Anchors
//
// 获取四个角位置的锚点。
func (d *TDateTimePicker) Anchors() TAnchors {
	return DateTimePicker_GetAnchors(d._instance())
}

// SetAnchors
//
// 设置四个角位置的锚点。
func (d *TDateTimePicker) SetAnchors(value TAnchors) {
	DateTimePicker_SetAnchors(d._instance(), value)
}

func (d *TDateTimePicker) BiDiMode() TBiDiMode {
	return DateTimePicker_GetBiDiMode(d._instance())
}

func (d *TDateTimePicker) SetBiDiMode(value TBiDiMode) {
	DateTimePicker_SetBiDiMode(d._instance(), value)
}

func (d *TDateTimePicker) CalAlignment() TDTCalAlignment {
	return DateTimePicker_GetCalAlignment(d._instance())
}

func (d *TDateTimePicker) SetCalAlignment(value TDTCalAlignment) {
	DateTimePicker_SetCalAlignment(d._instance(), value)
}

// Constraints
//
// 获取约束控件大小。
func (d *TDateTimePicker) Constraints() *TSizeConstraints {
	return AsSizeConstraints(DateTimePicker_GetConstraints(d._instance()))
}

// SetConstraints
//
// 设置约束控件大小。
func (d *TDateTimePicker) SetConstraints(value *TSizeConstraints) {
	DateTimePicker_SetConstraints(d._instance(), CheckPtr(value))
}

func (d *TDateTimePicker) Date() time.Time {
	return DateTimePicker_GetDate(d._instance())
}

func (d *TDateTimePicker) SetDate(value time.Time) {
	DateTimePicker_SetDate(d._instance(), value)
}

func (d *TDateTimePicker) Time() time.Time {
	return DateTimePicker_GetTime(d._instance())
}

func (d *TDateTimePicker) SetTime(value time.Time) {
	DateTimePicker_SetTime(d._instance(), value)
}

// Checked
//
// 获取是否选中。
func (d *TDateTimePicker) Checked() bool {
	return DateTimePicker_GetChecked(d._instance())
}

// SetChecked
//
// 设置是否选中。
func (d *TDateTimePicker) SetChecked(value bool) {
	DateTimePicker_SetChecked(d._instance(), value)
}

// Color
//
// 获取颜色。
//
// Get color.
func (d *TDateTimePicker) Color() TColor {
	return DateTimePicker_GetColor(d._instance())
}

// SetColor
//
// 设置颜色。
//
// Set color.
func (d *TDateTimePicker) SetColor(value TColor) {
	DateTimePicker_SetColor(d._instance(), value)
}

func (d *TDateTimePicker) DateMode() TDTDateMode {
	return DateTimePicker_GetDateMode(d._instance())
}

func (d *TDateTimePicker) SetDateMode(value TDTDateMode) {
	DateTimePicker_SetDateMode(d._instance(), value)
}

// DoubleBuffered
//
// 获取设置控件双缓冲。
//
// Get Set control double buffering.
func (d *TDateTimePicker) DoubleBuffered() bool {
	return DateTimePicker_GetDoubleBuffered(d._instance())
}

// SetDoubleBuffered
//
// 设置设置控件双缓冲。
//
// Set Set control double buffering.
func (d *TDateTimePicker) SetDoubleBuffered(value bool) {
	DateTimePicker_SetDoubleBuffered(d._instance(), value)
}

// Enabled
//
// 获取控件启用。
//
// Get the control enabled.
func (d *TDateTimePicker) Enabled() bool {
	return DateTimePicker_GetEnabled(d._instance())
}

// SetEnabled
//
// 设置控件启用。
//
// Set the control enabled.
func (d *TDateTimePicker) SetEnabled(value bool) {
	DateTimePicker_SetEnabled(d._instance(), value)
}

// Font
//
// 获取字体。
//
// Get Font.
func (d *TDateTimePicker) Font() *TFont {
	return AsFont(DateTimePicker_GetFont(d._instance()))
}

// SetFont
//
// 设置字体。
//
// Set Font.
func (d *TDateTimePicker) SetFont(value *TFont) {
	DateTimePicker_SetFont(d._instance(), CheckPtr(value))
}

func (d *TDateTimePicker) Kind() TDateTimeKind {
	return DateTimePicker_GetKind(d._instance())
}

func (d *TDateTimePicker) SetKind(value TDateTimeKind) {
	DateTimePicker_SetKind(d._instance(), value)
}

func (d *TDateTimePicker) MaxDate() time.Time {
	return DateTimePicker_GetMaxDate(d._instance())
}

func (d *TDateTimePicker) SetMaxDate(value time.Time) {
	DateTimePicker_SetMaxDate(d._instance(), value)
}

func (d *TDateTimePicker) MinDate() time.Time {
	return DateTimePicker_GetMinDate(d._instance())
}

func (d *TDateTimePicker) SetMinDate(value time.Time) {
	DateTimePicker_SetMinDate(d._instance(), value)
}

// ParentColor
//
// 获取使用父容器颜色。
//
// Get parent color.
func (d *TDateTimePicker) ParentColor() bool {
	return DateTimePicker_GetParentColor(d._instance())
}

// SetParentColor
//
// 设置使用父容器颜色。
//
// Set parent color.
func (d *TDateTimePicker) SetParentColor(value bool) {
	DateTimePicker_SetParentColor(d._instance(), value)
}

// ParentDoubleBuffered
//
// 获取使用父容器双缓冲。
//
// Get Parent container double buffering.
func (d *TDateTimePicker) ParentDoubleBuffered() bool {
	return DateTimePicker_GetParentDoubleBuffered(d._instance())
}

// SetParentDoubleBuffered
//
// 设置使用父容器双缓冲。
//
// Set Parent container double buffering.
func (d *TDateTimePicker) SetParentDoubleBuffered(value bool) {
	DateTimePicker_SetParentDoubleBuffered(d._instance(), value)
}

// ParentFont
//
// 获取使用父容器字体。
//
// Get Parent container font.
func (d *TDateTimePicker) ParentFont() bool {
	return DateTimePicker_GetParentFont(d._instance())
}

// SetParentFont
//
// 设置使用父容器字体。
//
// Set Parent container font.
func (d *TDateTimePicker) SetParentFont(value bool) {
	DateTimePicker_SetParentFont(d._instance(), value)
}

// ParentShowHint
//
// 获取以父容器的ShowHint属性为准。
func (d *TDateTimePicker) ParentShowHint() bool {
	return DateTimePicker_GetParentShowHint(d._instance())
}

// SetParentShowHint
//
// 设置以父容器的ShowHint属性为准。
func (d *TDateTimePicker) SetParentShowHint(value bool) {
	DateTimePicker_SetParentShowHint(d._instance(), value)
}

// PopupMenu
//
// 获取右键菜单。
//
// Get Right click menu.
func (d *TDateTimePicker) PopupMenu() *TPopupMenu {
	return AsPopupMenu(DateTimePicker_GetPopupMenu(d._instance()))
}

// SetPopupMenu
//
// 设置右键菜单。
//
// Set Right click menu.
func (d *TDateTimePicker) SetPopupMenu(value IComponent) {
	DateTimePicker_SetPopupMenu(d._instance(), CheckPtr(value))
}

// ShowHint
//
// 获取显示鼠标悬停提示。
//
// Get Show mouseover tips.
func (d *TDateTimePicker) ShowHint() bool {
	return DateTimePicker_GetShowHint(d._instance())
}

// SetShowHint
//
// 设置显示鼠标悬停提示。
//
// Set Show mouseover tips.
func (d *TDateTimePicker) SetShowHint(value bool) {
	DateTimePicker_SetShowHint(d._instance(), value)
}

// TabOrder
//
// 获取Tab切换顺序序号。
//
// Get Tab switching sequence number.
func (d *TDateTimePicker) TabOrder() TTabOrder {
	return DateTimePicker_GetTabOrder(d._instance())
}

// SetTabOrder
//
// 设置Tab切换顺序序号。
//
// Set Tab switching sequence number.
func (d *TDateTimePicker) SetTabOrder(value TTabOrder) {
	DateTimePicker_SetTabOrder(d._instance(), value)
}

// TabStop
//
// 获取Tab可停留。
//
// Get Tab can stay.
func (d *TDateTimePicker) TabStop() bool {
	return DateTimePicker_GetTabStop(d._instance())
}

// SetTabStop
//
// 设置Tab可停留。
//
// Set Tab can stay.
func (d *TDateTimePicker) SetTabStop(value bool) {
	DateTimePicker_SetTabStop(d._instance(), value)
}

// Visible
//
// 获取控件可视。
//
// Get the control visible.
func (d *TDateTimePicker) Visible() bool {
	return DateTimePicker_GetVisible(d._instance())
}

// SetVisible
//
// 设置控件可视。
//
// Set the control visible.
func (d *TDateTimePicker) SetVisible(value bool) {
	DateTimePicker_SetVisible(d._instance(), value)
}

// SetOnClick
//
// 设置控件单击事件。
//
// Set control click event.
func (d *TDateTimePicker) SetOnClick(fn TNotifyEvent) {
	DateTimePicker_SetOnClick(d._instance(), fn)
}

func (d *TDateTimePicker) SetOnCloseUp(fn TNotifyEvent) {
	DateTimePicker_SetOnCloseUp(d._instance(), fn)
}

// SetOnChange
//
// 设置改变事件。
//
// Set changed event.
func (d *TDateTimePicker) SetOnChange(fn TNotifyEvent) {
	DateTimePicker_SetOnChange(d._instance(), fn)
}

// SetOnContextPopup
//
// 设置上下文弹出事件，一般是右键时弹出。
//
// Set Context popup event, usually pop up when right click.
func (d *TDateTimePicker) SetOnContextPopup(fn TContextPopupEvent) {
	DateTimePicker_SetOnContextPopup(d._instance(), fn)
}

func (d *TDateTimePicker) SetOnDropDown(fn TNotifyEvent) {
	DateTimePicker_SetOnDropDown(d._instance(), fn)
}

// SetOnEnter
//
// 设置焦点进入。
//
// Set Focus entry.
func (d *TDateTimePicker) SetOnEnter(fn TNotifyEvent) {
	DateTimePicker_SetOnEnter(d._instance(), fn)
}

// SetOnExit
//
// 设置焦点退出。
//
// Set Focus exit.
func (d *TDateTimePicker) SetOnExit(fn TNotifyEvent) {
	DateTimePicker_SetOnExit(d._instance(), fn)
}

// SetOnKeyDown
//
// 设置键盘按键按下事件。
//
// Set Keyboard button press event.
func (d *TDateTimePicker) SetOnKeyDown(fn TKeyEvent) {
	DateTimePicker_SetOnKeyDown(d._instance(), fn)
}

// SetOnKeyPress
//
// 设置键键下事件。
func (d *TDateTimePicker) SetOnKeyPress(fn TKeyPressEvent) {
	DateTimePicker_SetOnKeyPress(d._instance(), fn)
}

// SetOnKeyUp
//
// 设置键盘按键抬起事件。
//
// Set Keyboard button lift event.
func (d *TDateTimePicker) SetOnKeyUp(fn TKeyEvent) {
	DateTimePicker_SetOnKeyUp(d._instance(), fn)
}

// SetOnMouseEnter
//
// 设置鼠标进入事件。
//
// Set Mouse entry event.
func (d *TDateTimePicker) SetOnMouseEnter(fn TNotifyEvent) {
	DateTimePicker_SetOnMouseEnter(d._instance(), fn)
}

// SetOnMouseLeave
//
// 设置鼠标离开事件。
//
// Set Mouse leave event.
func (d *TDateTimePicker) SetOnMouseLeave(fn TNotifyEvent) {
	DateTimePicker_SetOnMouseLeave(d._instance(), fn)
}

// DockClientCount
//
// 获取依靠客户端总数。
func (d *TDateTimePicker) DockClientCount() int32 {
	return DateTimePicker_GetDockClientCount(d._instance())
}

// DockSite
//
// 获取停靠站点。
//
// Get Docking site.
func (d *TDateTimePicker) DockSite() bool {
	return DateTimePicker_GetDockSite(d._instance())
}

// SetDockSite
//
// 设置停靠站点。
//
// Set Docking site.
func (d *TDateTimePicker) SetDockSite(value bool) {
	DateTimePicker_SetDockSite(d._instance(), value)
}

// MouseInClient
//
// 获取鼠标是否在客户端，仅VCL有效。
//
// Get Whether the mouse is on the client, only VCL is valid.
func (d *TDateTimePicker) MouseInClient() bool {
	return DateTimePicker_GetMouseInClient(d._instance())
}

// VisibleDockClientCount
//
// 获取当前停靠的可视总数。
//
// Get The total number of visible calls currently docked.
func (d *TDateTimePicker) VisibleDockClientCount() int32 {
	return DateTimePicker_GetVisibleDockClientCount(d._instance())
}

// Brush
//
// 获取画刷对象。
//
// Get Brush.
func (d *TDateTimePicker) Brush() *TBrush {
	return AsBrush(DateTimePicker_GetBrush(d._instance()))
}

// ControlCount
//
// 获取子控件数。
//
// Get Number of child controls.
func (d *TDateTimePicker) ControlCount() int32 {
	return DateTimePicker_GetControlCount(d._instance())
}

// Handle
//
// 获取控件句柄。
//
// Get Control handle.
func (d *TDateTimePicker) Handle() HWND {
	return DateTimePicker_GetHandle(d._instance())
}

// ParentWindow
//
// 获取父容器句柄。
//
// Get Parent container handle.
func (d *TDateTimePicker) ParentWindow() HWND {
	return DateTimePicker_GetParentWindow(d._instance())
}

// SetParentWindow
//
// 设置父容器句柄。
//
// Set Parent container handle.
func (d *TDateTimePicker) SetParentWindow(value HWND) {
	DateTimePicker_SetParentWindow(d._instance(), value)
}

func (d *TDateTimePicker) Showing() bool {
	return DateTimePicker_GetShowing(d._instance())
}

// UseDockManager
//
// 获取使用停靠管理。
func (d *TDateTimePicker) UseDockManager() bool {
	return DateTimePicker_GetUseDockManager(d._instance())
}

// SetUseDockManager
//
// 设置使用停靠管理。
func (d *TDateTimePicker) SetUseDockManager(value bool) {
	DateTimePicker_SetUseDockManager(d._instance(), value)
}

func (d *TDateTimePicker) Action() *TAction {
	return AsAction(DateTimePicker_GetAction(d._instance()))
}

func (d *TDateTimePicker) SetAction(value IComponent) {
	DateTimePicker_SetAction(d._instance(), CheckPtr(value))
}

func (d *TDateTimePicker) BoundsRect() TRect {
	return DateTimePicker_GetBoundsRect(d._instance())
}

func (d *TDateTimePicker) SetBoundsRect(value TRect) {
	DateTimePicker_SetBoundsRect(d._instance(), value)
}

// ClientHeight
//
// 获取客户区高度。
//
// Get client height.
func (d *TDateTimePicker) ClientHeight() int32 {
	return DateTimePicker_GetClientHeight(d._instance())
}

// SetClientHeight
//
// 设置客户区高度。
//
// Set client height.
func (d *TDateTimePicker) SetClientHeight(value int32) {
	DateTimePicker_SetClientHeight(d._instance(), value)
}

func (d *TDateTimePicker) ClientOrigin() TPoint {
	return DateTimePicker_GetClientOrigin(d._instance())
}

// ClientRect
//
// 获取客户区矩形。
//
// Get client rectangle.
func (d *TDateTimePicker) ClientRect() TRect {
	return DateTimePicker_GetClientRect(d._instance())
}

// ClientWidth
//
// 获取客户区宽度。
//
// Get client width.
func (d *TDateTimePicker) ClientWidth() int32 {
	return DateTimePicker_GetClientWidth(d._instance())
}

// SetClientWidth
//
// 设置客户区宽度。
//
// Set client width.
func (d *TDateTimePicker) SetClientWidth(value int32) {
	DateTimePicker_SetClientWidth(d._instance(), value)
}

// ControlState
//
// 获取控件状态。
//
// Get control state.
func (d *TDateTimePicker) ControlState() TControlState {
	return DateTimePicker_GetControlState(d._instance())
}

// SetControlState
//
// 设置控件状态。
//
// Set control state.
func (d *TDateTimePicker) SetControlState(value TControlState) {
	DateTimePicker_SetControlState(d._instance(), value)
}

// ControlStyle
//
// 获取控件样式。
//
// Get control style.
func (d *TDateTimePicker) ControlStyle() TControlStyle {
	return DateTimePicker_GetControlStyle(d._instance())
}

// SetControlStyle
//
// 设置控件样式。
//
// Set control style.
func (d *TDateTimePicker) SetControlStyle(value TControlStyle) {
	DateTimePicker_SetControlStyle(d._instance(), value)
}

func (d *TDateTimePicker) Floating() bool {
	return DateTimePicker_GetFloating(d._instance())
}

// Parent
//
// 获取控件父容器。
//
// Get control parent container.
func (d *TDateTimePicker) Parent() *TWinControl {
	return AsWinControl(DateTimePicker_GetParent(d._instance()))
}

// SetParent
//
// 设置控件父容器。
//
// Set control parent container.
func (d *TDateTimePicker) SetParent(value IWinControl) {
	DateTimePicker_SetParent(d._instance(), CheckPtr(value))
}

// Left
//
// 获取左边位置。
//
// Get Left position.
func (d *TDateTimePicker) Left() int32 {
	return DateTimePicker_GetLeft(d._instance())
}

// SetLeft
//
// 设置左边位置。
//
// Set Left position.
func (d *TDateTimePicker) SetLeft(value int32) {
	DateTimePicker_SetLeft(d._instance(), value)
}

// Top
//
// 获取顶边位置。
//
// Get Top position.
func (d *TDateTimePicker) Top() int32 {
	return DateTimePicker_GetTop(d._instance())
}

// SetTop
//
// 设置顶边位置。
//
// Set Top position.
func (d *TDateTimePicker) SetTop(value int32) {
	DateTimePicker_SetTop(d._instance(), value)
}

// Width
//
// 获取宽度。
//
// Get width.
func (d *TDateTimePicker) Width() int32 {
	return DateTimePicker_GetWidth(d._instance())
}

// SetWidth
//
// 设置宽度。
//
// Set width.
func (d *TDateTimePicker) SetWidth(value int32) {
	DateTimePicker_SetWidth(d._instance(), value)
}

// Height
//
// 获取高度。
//
// Get height.
func (d *TDateTimePicker) Height() int32 {
	return DateTimePicker_GetHeight(d._instance())
}

// SetHeight
//
// 设置高度。
//
// Set height.
func (d *TDateTimePicker) SetHeight(value int32) {
	DateTimePicker_SetHeight(d._instance(), value)
}

// Cursor
//
// 获取控件光标。
//
// Get control cursor.
func (d *TDateTimePicker) Cursor() TCursor {
	return DateTimePicker_GetCursor(d._instance())
}

// SetCursor
//
// 设置控件光标。
//
// Set control cursor.
func (d *TDateTimePicker) SetCursor(value TCursor) {
	DateTimePicker_SetCursor(d._instance(), value)
}

// Hint
//
// 获取组件鼠标悬停提示。
//
// Get component mouse hints.
func (d *TDateTimePicker) Hint() string {
	return DateTimePicker_GetHint(d._instance())
}

// SetHint
//
// 设置组件鼠标悬停提示。
//
// Set component mouse hints.
func (d *TDateTimePicker) SetHint(value string) {
	DateTimePicker_SetHint(d._instance(), value)
}

// ComponentCount
//
// 获取组件总数。
//
// Get the total number of components.
func (d *TDateTimePicker) ComponentCount() int32 {
	return DateTimePicker_GetComponentCount(d._instance())
}

// ComponentIndex
//
// 获取组件索引。
//
// Get component index.
func (d *TDateTimePicker) ComponentIndex() int32 {
	return DateTimePicker_GetComponentIndex(d._instance())
}

// SetComponentIndex
//
// 设置组件索引。
//
// Set component index.
func (d *TDateTimePicker) SetComponentIndex(value int32) {
	DateTimePicker_SetComponentIndex(d._instance(), value)
}

// Owner
//
// 获取组件所有者。
//
// Get component owner.
func (d *TDateTimePicker) Owner() *TComponent {
	return AsComponent(DateTimePicker_GetOwner(d._instance()))
}

// Name
//
// 获取组件名称。
//
// Get the component name.
func (d *TDateTimePicker) Name() string {
	return DateTimePicker_GetName(d._instance())
}

// SetName
//
// 设置组件名称。
//
// Set the component name.
func (d *TDateTimePicker) SetName(value string) {
	DateTimePicker_SetName(d._instance(), value)
}

// Tag
//
// 获取对象标记。
//
// Get the control tag.
func (d *TDateTimePicker) Tag() int {
	return DateTimePicker_GetTag(d._instance())
}

// SetTag
//
// 设置对象标记。
//
// Set the control tag.
func (d *TDateTimePicker) SetTag(value int) {
	DateTimePicker_SetTag(d._instance(), value)
}

// AnchorSideLeft
//
// 获取左边锚点。
func (d *TDateTimePicker) AnchorSideLeft() *TAnchorSide {
	return AsAnchorSide(DateTimePicker_GetAnchorSideLeft(d._instance()))
}

// SetAnchorSideLeft
//
// 设置左边锚点。
func (d *TDateTimePicker) SetAnchorSideLeft(value *TAnchorSide) {
	DateTimePicker_SetAnchorSideLeft(d._instance(), CheckPtr(value))
}

// AnchorSideTop
//
// 获取顶边锚点。
func (d *TDateTimePicker) AnchorSideTop() *TAnchorSide {
	return AsAnchorSide(DateTimePicker_GetAnchorSideTop(d._instance()))
}

// SetAnchorSideTop
//
// 设置顶边锚点。
func (d *TDateTimePicker) SetAnchorSideTop(value *TAnchorSide) {
	DateTimePicker_SetAnchorSideTop(d._instance(), CheckPtr(value))
}

// AnchorSideRight
//
// 获取右边锚点。
func (d *TDateTimePicker) AnchorSideRight() *TAnchorSide {
	return AsAnchorSide(DateTimePicker_GetAnchorSideRight(d._instance()))
}

// SetAnchorSideRight
//
// 设置右边锚点。
func (d *TDateTimePicker) SetAnchorSideRight(value *TAnchorSide) {
	DateTimePicker_SetAnchorSideRight(d._instance(), CheckPtr(value))
}

// AnchorSideBottom
//
// 获取底边锚点。
func (d *TDateTimePicker) AnchorSideBottom() *TAnchorSide {
	return AsAnchorSide(DateTimePicker_GetAnchorSideBottom(d._instance()))
}

// SetAnchorSideBottom
//
// 设置底边锚点。
func (d *TDateTimePicker) SetAnchorSideBottom(value *TAnchorSide) {
	DateTimePicker_SetAnchorSideBottom(d._instance(), CheckPtr(value))
}

func (d *TDateTimePicker) ChildSizing() *TControlChildSizing {
	return AsControlChildSizing(DateTimePicker_GetChildSizing(d._instance()))
}

func (d *TDateTimePicker) SetChildSizing(value *TControlChildSizing) {
	DateTimePicker_SetChildSizing(d._instance(), CheckPtr(value))
}

// BorderSpacing
//
// 获取边框间距。
func (d *TDateTimePicker) BorderSpacing() *TControlBorderSpacing {
	return AsControlBorderSpacing(DateTimePicker_GetBorderSpacing(d._instance()))
}

// SetBorderSpacing
//
// 设置边框间距。
func (d *TDateTimePicker) SetBorderSpacing(value *TControlBorderSpacing) {
	DateTimePicker_SetBorderSpacing(d._instance(), CheckPtr(value))
}

// DockClients
//
// 获取指定索引停靠客户端。
func (d *TDateTimePicker) DockClients(Index int32) *TControl {
	return AsControl(DateTimePicker_GetDockClients(d._instance(), Index))
}

// Controls
//
// 获取指定索引子控件。
func (d *TDateTimePicker) Controls(Index int32) *TControl {
	return AsControl(DateTimePicker_GetControls(d._instance(), Index))
}

// Components
//
// 获取指定索引组件。
//
// Get the specified index component.
func (d *TDateTimePicker) Components(AIndex int32) *TComponent {
	return AsComponent(DateTimePicker_GetComponents(d._instance(), AIndex))
}

// AnchorSide
//
// 获取锚侧面。
func (d *TDateTimePicker) AnchorSide(AKind TAnchorKind) *TAnchorSide {
	return AsAnchorSide(DateTimePicker_GetAnchorSide(d._instance(), AKind))
}
