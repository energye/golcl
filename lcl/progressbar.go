//----------------------------------------
// The code is automatically generated by the GenlibLcl tool.
// Copyright © ying32. All Rights Reserved.
//
// Licensed under Apache License 2.0
//
//----------------------------------------

package lcl

import (
	. "github.com/energye/golcl/lcl/api"
	. "github.com/energye/golcl/lcl/types"
	"unsafe"
)

type TProgressBar struct {
	IWinControl
	instance unsafe.Pointer
}

// NewProgressBar
//
// 创建一个新的对象。
//
// Create a new object.
func NewProgressBar(owner IComponent) *TProgressBar {
	p := new(TProgressBar)
	p.instance = unsafe.Pointer(ProgressBar_Create(CheckPtr(owner)))
	return p
}

// AsProgressBar
//
// 动态转换一个已存在的对象实例。
//
// Dynamically convert an existing object instance.
func AsProgressBar(obj interface{}) *TProgressBar {
	instance := getInstance(obj)
	if instance == nullptr {
		return nil
	}
	return &TProgressBar{instance: instance}
}

// Free
//
// 释放对象。
//
// Free object.
func (p *TProgressBar) Free() {
	if p.instance != nullptr {
		ProgressBar_Free(p._instance())
		p.instance = nullptr
	}
}

func (p *TProgressBar) _instance() uintptr {
	return uintptr(p.instance)
}

// Instance
//
// 返回对象实例指针。
//
// Return object instance pointer.
func (p *TProgressBar) Instance() uintptr {
	return p._instance()
}

// UnsafeAddr
//
// 获取一个不安全的地址。
//
// Get an unsafe address.
func (p *TProgressBar) UnsafeAddr() unsafe.Pointer {
	return p.instance
}

// IsValid
//
// 检测地址是否为空。
//
// Check if the address is empty.
func (p *TProgressBar) IsValid() bool {
	return p.instance != nullptr
}

// Is
//
// 检测当前对象是否继承自目标对象。
//
// Checks whether the current object is inherited from the target object.
func (p *TProgressBar) Is() TIs {
	return TIs(p._instance())
}

// As
//
// 动态转换当前对象为目标对象。
//
// Dynamically convert the current object to the target object.
//func (p *TProgressBar) As() TAs {
//    return TAs(p._instance())
//}

// TProgressBarClass
//
// 获取类信息指针。
//
// Get class information pointer.
func TProgressBarClass() TClass {
	return ProgressBar_StaticClassType()
}

func (p *TProgressBar) StepIt() {
	ProgressBar_StepIt(p._instance())
}

func (p *TProgressBar) StepBy(Delta int32) {
	ProgressBar_StepBy(p._instance(), Delta)
}

// CanFocus
//
// 是否可以获得焦点。
func (p *TProgressBar) CanFocus() bool {
	return ProgressBar_CanFocus(p._instance())
}

// ContainsControl
//
// 返回是否包含指定控件。
//
// it's contain a specified control.
func (p *TProgressBar) ContainsControl(Control IControl) bool {
	return ProgressBar_ContainsControl(p._instance(), CheckPtr(Control))
}

// ControlAtPos
//
// 返回指定坐标及相关属性位置控件。
//
// Returns the specified coordinate and the relevant attribute position control..
func (p *TProgressBar) ControlAtPos(Pos TPoint, AllowDisabled bool, AllowWinControls bool, AllLevels bool) *TControl {
	return AsControl(ProgressBar_ControlAtPos(p._instance(), Pos, AllowDisabled, AllowWinControls, AllLevels))
}

// DisableAlign
//
// 禁用控件的对齐。
//
// Disable control alignment.
func (p *TProgressBar) DisableAlign() {
	ProgressBar_DisableAlign(p._instance())
}

// EnableAlign
//
// 启用控件对齐。
//
// Enabled control alignment.
func (p *TProgressBar) EnableAlign() {
	ProgressBar_EnableAlign(p._instance())
}

// FindChildControl
//
// 查找子控件。
//
// Find sub controls.
func (p *TProgressBar) FindChildControl(ControlName string) *TControl {
	return AsControl(ProgressBar_FindChildControl(p._instance(), ControlName))
}

func (p *TProgressBar) FlipChildren(AllLevels bool) {
	ProgressBar_FlipChildren(p._instance(), AllLevels)
}

// Focused
//
// 返回是否获取焦点。
//
// Return to get focus.
func (p *TProgressBar) Focused() bool {
	return ProgressBar_Focused(p._instance())
}

// HandleAllocated
//
// 句柄是否已经分配。
//
// Is the handle already allocated.
func (p *TProgressBar) HandleAllocated() bool {
	return ProgressBar_HandleAllocated(p._instance())
}

// InsertControl
//
// 插入一个控件。
//
// Insert a control.
func (p *TProgressBar) InsertControl(AControl IControl) {
	ProgressBar_InsertControl(p._instance(), CheckPtr(AControl))
}

// Invalidate
//
// 要求重绘。
//
// Redraw.
func (p *TProgressBar) Invalidate() {
	ProgressBar_Invalidate(p._instance())
}

// PaintTo
//
// 绘画至指定DC。
//
// Painting to the specified DC.
func (p *TProgressBar) PaintTo(DC HDC, X int32, Y int32) {
	ProgressBar_PaintTo(p._instance(), DC, X, Y)
}

// RemoveControl
//
// 移除一个控件。
//
// Remove a control.
func (p *TProgressBar) RemoveControl(AControl IControl) {
	ProgressBar_RemoveControl(p._instance(), CheckPtr(AControl))
}

// Realign
//
// 重新对齐。
//
// Realign.
func (p *TProgressBar) Realign() {
	ProgressBar_Realign(p._instance())
}

// Repaint
//
// 重绘。
//
// Repaint.
func (p *TProgressBar) Repaint() {
	ProgressBar_Repaint(p._instance())
}

// ScaleBy
//
// 按比例缩放。
//
// Scale by.
func (p *TProgressBar) ScaleBy(M int32, D int32) {
	ProgressBar_ScaleBy(p._instance(), M, D)
}

// ScrollBy
//
// 滚动至指定位置。
//
// Scroll by.
func (p *TProgressBar) ScrollBy(DeltaX int32, DeltaY int32) {
	ProgressBar_ScrollBy(p._instance(), DeltaX, DeltaY)
}

// SetBounds
//
// 设置组件边界。
//
// Set component boundaries.
func (p *TProgressBar) SetBounds(ALeft int32, ATop int32, AWidth int32, AHeight int32) {
	ProgressBar_SetBounds(p._instance(), ALeft, ATop, AWidth, AHeight)
}

// SetFocus
//
// 设置控件焦点。
//
// Set control focus.
func (p *TProgressBar) SetFocus() {
	ProgressBar_SetFocus(p._instance())
}

// Update
//
// 控件更新。
//
// Update.
func (p *TProgressBar) Update() {
	ProgressBar_Update(p._instance())
}

// BringToFront
//
// 将控件置于最前。
//
// Bring the control to the front.
func (p *TProgressBar) BringToFront() {
	ProgressBar_BringToFront(p._instance())
}

// ClientToScreen
//
// 将客户端坐标转为绝对的屏幕坐标。
//
// Convert client coordinates to absolute screen coordinates.
func (p *TProgressBar) ClientToScreen(Point TPoint) TPoint {
	return ProgressBar_ClientToScreen(p._instance(), Point)
}

// ClientToParent
//
// 将客户端坐标转为父容器坐标。
//
// Convert client coordinates to parent container coordinates.
func (p *TProgressBar) ClientToParent(Point TPoint, AParent IWinControl) TPoint {
	return ProgressBar_ClientToParent(p._instance(), Point, CheckPtr(AParent))
}

// Dragging
//
// 是否在拖拽中。
//
// Is it in the middle of dragging.
func (p *TProgressBar) Dragging() bool {
	return ProgressBar_Dragging(p._instance())
}

// HasParent
//
// 是否有父容器。
//
// Is there a parent container.
func (p *TProgressBar) HasParent() bool {
	return ProgressBar_HasParent(p._instance())
}

// Hide
//
// 隐藏控件。
//
// Hidden control.
func (p *TProgressBar) Hide() {
	ProgressBar_Hide(p._instance())
}

// Perform
//
// 发送一个消息。
//
// Send a message.
func (p *TProgressBar) Perform(Msg uint32, WParam uintptr, LParam int) int {
	return ProgressBar_Perform(p._instance(), Msg, WParam, LParam)
}

// Refresh
//
// 刷新控件。
//
// Refresh control.
func (p *TProgressBar) Refresh() {
	ProgressBar_Refresh(p._instance())
}

// ScreenToClient
//
// 将屏幕坐标转为客户端坐标。
//
// Convert screen coordinates to client coordinates.
func (p *TProgressBar) ScreenToClient(Point TPoint) TPoint {
	return ProgressBar_ScreenToClient(p._instance(), Point)
}

// ParentToClient
//
// 将父容器坐标转为客户端坐标。
//
// Convert parent container coordinates to client coordinates.
func (p *TProgressBar) ParentToClient(Point TPoint, AParent IWinControl) TPoint {
	return ProgressBar_ParentToClient(p._instance(), Point, CheckPtr(AParent))
}

// SendToBack
//
// 控件至于最后面。
//
// The control is placed at the end.
func (p *TProgressBar) SendToBack() {
	ProgressBar_SendToBack(p._instance())
}

// Show
//
// 显示控件。
//
// Show control.
func (p *TProgressBar) Show() {
	ProgressBar_Show(p._instance())
}

// GetTextBuf
//
// 获取控件的字符，如果有。
//
// Get the characters of the control, if any.
func (p *TProgressBar) GetTextBuf(Buffer *string, BufSize int32) int32 {
	return ProgressBar_GetTextBuf(p._instance(), Buffer, BufSize)
}

// GetTextLen
//
// 获取控件的字符长，如果有。
//
// Get the character length of the control, if any.
func (p *TProgressBar) GetTextLen() int32 {
	return ProgressBar_GetTextLen(p._instance())
}

// SetTextBuf
//
// 设置控件字符，如果有。
//
// Set control characters, if any.
func (p *TProgressBar) SetTextBuf(Buffer string) {
	ProgressBar_SetTextBuf(p._instance(), Buffer)
}

// FindComponent
//
// 查找指定名称的组件。
//
// Find the component with the specified name.
func (p *TProgressBar) FindComponent(AName string) *TComponent {
	return AsComponent(ProgressBar_FindComponent(p._instance(), AName))
}

// GetNamePath
//
// 获取类名路径。
//
// Get the class name path.
func (p *TProgressBar) GetNamePath() string {
	return ProgressBar_GetNamePath(p._instance())
}

// Assign
//
// 复制一个对象，如果对象实现了此方法的话。
//
// Copy an object, if the object implements this method.
func (p *TProgressBar) Assign(Source IObject) {
	ProgressBar_Assign(p._instance(), CheckPtr(Source))
}

// ClassType
//
// 获取类的类型信息。
//
// Get class type information.
func (p *TProgressBar) ClassType() TClass {
	return ProgressBar_ClassType(p._instance())
}

// ClassName
//
// 获取当前对象类名称。
//
// Get the current object class name.
func (p *TProgressBar) ClassName() string {
	return ProgressBar_ClassName(p._instance())
}

// InstanceSize
//
// 获取当前对象实例大小。
//
// Get the current object instance size.
func (p *TProgressBar) InstanceSize() int32 {
	return ProgressBar_InstanceSize(p._instance())
}

// InheritsFrom
//
// 判断当前类是否继承自指定类。
//
// Determine whether the current class inherits from the specified class.
func (p *TProgressBar) InheritsFrom(AClass TClass) bool {
	return ProgressBar_InheritsFrom(p._instance(), AClass)
}

// Equals
//
// 与一个对象进行比较。
//
// Compare with an object.
func (p *TProgressBar) Equals(Obj IObject) bool {
	return ProgressBar_Equals(p._instance(), CheckPtr(Obj))
}

// GetHashCode
//
// 获取类的哈希值。
//
// Get the hash value of the class.
func (p *TProgressBar) GetHashCode() int32 {
	return ProgressBar_GetHashCode(p._instance())
}

// ToString
//
// 文本类信息。
//
// Text information.
func (p *TProgressBar) ToString() string {
	return ProgressBar_ToString(p._instance())
}

func (p *TProgressBar) AnchorToNeighbour(ASide TAnchorKind, ASpace int32, ASibling IControl) {
	ProgressBar_AnchorToNeighbour(p._instance(), ASide, ASpace, CheckPtr(ASibling))
}

func (p *TProgressBar) AnchorParallel(ASide TAnchorKind, ASpace int32, ASibling IControl) {
	ProgressBar_AnchorParallel(p._instance(), ASide, ASpace, CheckPtr(ASibling))
}

// AnchorHorizontalCenterTo
//
// 置于指定控件的横向中心。
func (p *TProgressBar) AnchorHorizontalCenterTo(ASibling IControl) {
	ProgressBar_AnchorHorizontalCenterTo(p._instance(), CheckPtr(ASibling))
}

// AnchorVerticalCenterTo
//
// 置于指定控件的纵向中心。
func (p *TProgressBar) AnchorVerticalCenterTo(ASibling IControl) {
	ProgressBar_AnchorVerticalCenterTo(p._instance(), CheckPtr(ASibling))
}

func (p *TProgressBar) AnchorSame(ASide TAnchorKind, ASibling IControl) {
	ProgressBar_AnchorSame(p._instance(), ASide, CheckPtr(ASibling))
}

func (p *TProgressBar) AnchorAsAlign(ATheAlign TAlign, ASpace int32) {
	ProgressBar_AnchorAsAlign(p._instance(), ATheAlign, ASpace)
}

func (p *TProgressBar) AnchorClient(ASpace int32) {
	ProgressBar_AnchorClient(p._instance(), ASpace)
}

func (p *TProgressBar) ScaleDesignToForm(ASize int32) int32 {
	return ProgressBar_ScaleDesignToForm(p._instance(), ASize)
}

func (p *TProgressBar) ScaleFormToDesign(ASize int32) int32 {
	return ProgressBar_ScaleFormToDesign(p._instance(), ASize)
}

func (p *TProgressBar) Scale96ToForm(ASize int32) int32 {
	return ProgressBar_Scale96ToForm(p._instance(), ASize)
}

func (p *TProgressBar) ScaleFormTo96(ASize int32) int32 {
	return ProgressBar_ScaleFormTo96(p._instance(), ASize)
}

func (p *TProgressBar) Scale96ToFont(ASize int32) int32 {
	return ProgressBar_Scale96ToFont(p._instance(), ASize)
}

func (p *TProgressBar) ScaleFontTo96(ASize int32) int32 {
	return ProgressBar_ScaleFontTo96(p._instance(), ASize)
}

func (p *TProgressBar) ScaleScreenToFont(ASize int32) int32 {
	return ProgressBar_ScaleScreenToFont(p._instance(), ASize)
}

func (p *TProgressBar) ScaleFontToScreen(ASize int32) int32 {
	return ProgressBar_ScaleFontToScreen(p._instance(), ASize)
}

func (p *TProgressBar) Scale96ToScreen(ASize int32) int32 {
	return ProgressBar_Scale96ToScreen(p._instance(), ASize)
}

func (p *TProgressBar) ScaleScreenTo96(ASize int32) int32 {
	return ProgressBar_ScaleScreenTo96(p._instance(), ASize)
}

func (p *TProgressBar) AutoAdjustLayout(AMode TLayoutAdjustmentPolicy, AFromPPI int32, AToPPI int32, AOldFormWidth int32, ANewFormWidth int32) {
	ProgressBar_AutoAdjustLayout(p._instance(), AMode, AFromPPI, AToPPI, AOldFormWidth, ANewFormWidth)
}

func (p *TProgressBar) FixDesignFontsPPI(ADesignTimePPI int32) {
	ProgressBar_FixDesignFontsPPI(p._instance(), ADesignTimePPI)
}

func (p *TProgressBar) ScaleFontsPPI(AToPPI int32, AProportion float64) {
	ProgressBar_ScaleFontsPPI(p._instance(), AToPPI, AProportion)
}

// Align
//
// 获取控件自动调整。
//
// Get Control automatically adjusts.
func (p *TProgressBar) Align() TAlign {
	return ProgressBar_GetAlign(p._instance())
}

// SetAlign
//
// 设置控件自动调整。
//
// Set Control automatically adjusts.
func (p *TProgressBar) SetAlign(value TAlign) {
	ProgressBar_SetAlign(p._instance(), value)
}

// Anchors
//
// 获取四个角位置的锚点。
func (p *TProgressBar) Anchors() TAnchors {
	return ProgressBar_GetAnchors(p._instance())
}

// SetAnchors
//
// 设置四个角位置的锚点。
func (p *TProgressBar) SetAnchors(value TAnchors) {
	ProgressBar_SetAnchors(p._instance(), value)
}

// BorderWidth
//
// 获取边框的宽度。
func (p *TProgressBar) BorderWidth() int32 {
	return ProgressBar_GetBorderWidth(p._instance())
}

// SetBorderWidth
//
// 设置边框的宽度。
func (p *TProgressBar) SetBorderWidth(value int32) {
	ProgressBar_SetBorderWidth(p._instance(), value)
}

// DoubleBuffered
//
// 获取设置控件双缓冲。
//
// Get Set control double buffering.
func (p *TProgressBar) DoubleBuffered() bool {
	return ProgressBar_GetDoubleBuffered(p._instance())
}

// SetDoubleBuffered
//
// 设置设置控件双缓冲。
//
// Set Set control double buffering.
func (p *TProgressBar) SetDoubleBuffered(value bool) {
	ProgressBar_SetDoubleBuffered(p._instance(), value)
}

// DragCursor
//
// 获取设置控件拖拽时的光标。
//
// Get Set the cursor when the control is dragged.
func (p *TProgressBar) DragCursor() TCursor {
	return ProgressBar_GetDragCursor(p._instance())
}

// SetDragCursor
//
// 设置设置控件拖拽时的光标。
//
// Set Set the cursor when the control is dragged.
func (p *TProgressBar) SetDragCursor(value TCursor) {
	ProgressBar_SetDragCursor(p._instance(), value)
}

// DragKind
//
// 获取拖拽方式。
//
// Get Drag and drop.
func (p *TProgressBar) DragKind() TDragKind {
	return ProgressBar_GetDragKind(p._instance())
}

// SetDragKind
//
// 设置拖拽方式。
//
// Set Drag and drop.
func (p *TProgressBar) SetDragKind(value TDragKind) {
	ProgressBar_SetDragKind(p._instance(), value)
}

// DragMode
//
// 获取拖拽模式。
//
// Get Drag mode.
func (p *TProgressBar) DragMode() TDragMode {
	return ProgressBar_GetDragMode(p._instance())
}

// SetDragMode
//
// 设置拖拽模式。
//
// Set Drag mode.
func (p *TProgressBar) SetDragMode(value TDragMode) {
	ProgressBar_SetDragMode(p._instance(), value)
}

// Enabled
//
// 获取控件启用。
//
// Get the control enabled.
func (p *TProgressBar) Enabled() bool {
	return ProgressBar_GetEnabled(p._instance())
}

// SetEnabled
//
// 设置控件启用。
//
// Set the control enabled.
func (p *TProgressBar) SetEnabled(value bool) {
	ProgressBar_SetEnabled(p._instance(), value)
}

// Hint
//
// 获取组件鼠标悬停提示。
//
// Get component mouse hints.
func (p *TProgressBar) Hint() string {
	return ProgressBar_GetHint(p._instance())
}

// SetHint
//
// 设置组件鼠标悬停提示。
//
// Set component mouse hints.
func (p *TProgressBar) SetHint(value string) {
	ProgressBar_SetHint(p._instance(), value)
}

// Constraints
//
// 获取约束控件大小。
func (p *TProgressBar) Constraints() *TSizeConstraints {
	return AsSizeConstraints(ProgressBar_GetConstraints(p._instance()))
}

// SetConstraints
//
// 设置约束控件大小。
func (p *TProgressBar) SetConstraints(value *TSizeConstraints) {
	ProgressBar_SetConstraints(p._instance(), CheckPtr(value))
}

func (p *TProgressBar) Min() int32 {
	return ProgressBar_GetMin(p._instance())
}

func (p *TProgressBar) SetMin(value int32) {
	ProgressBar_SetMin(p._instance(), value)
}

func (p *TProgressBar) Max() int32 {
	return ProgressBar_GetMax(p._instance())
}

func (p *TProgressBar) SetMax(value int32) {
	ProgressBar_SetMax(p._instance(), value)
}

func (p *TProgressBar) Orientation() TProgressBarOrientation {
	return ProgressBar_GetOrientation(p._instance())
}

func (p *TProgressBar) SetOrientation(value TProgressBarOrientation) {
	ProgressBar_SetOrientation(p._instance(), value)
}

// ParentDoubleBuffered
//
// 获取使用父容器双缓冲。
//
// Get Parent container double buffering.
func (p *TProgressBar) ParentDoubleBuffered() bool {
	return ProgressBar_GetParentDoubleBuffered(p._instance())
}

// SetParentDoubleBuffered
//
// 设置使用父容器双缓冲。
//
// Set Parent container double buffering.
func (p *TProgressBar) SetParentDoubleBuffered(value bool) {
	ProgressBar_SetParentDoubleBuffered(p._instance(), value)
}

// ParentShowHint
//
// 获取以父容器的ShowHint属性为准。
func (p *TProgressBar) ParentShowHint() bool {
	return ProgressBar_GetParentShowHint(p._instance())
}

// SetParentShowHint
//
// 设置以父容器的ShowHint属性为准。
func (p *TProgressBar) SetParentShowHint(value bool) {
	ProgressBar_SetParentShowHint(p._instance(), value)
}

// PopupMenu
//
// 获取右键菜单。
//
// Get Right click menu.
func (p *TProgressBar) PopupMenu() *TPopupMenu {
	return AsPopupMenu(ProgressBar_GetPopupMenu(p._instance()))
}

// SetPopupMenu
//
// 设置右键菜单。
//
// Set Right click menu.
func (p *TProgressBar) SetPopupMenu(value IComponent) {
	ProgressBar_SetPopupMenu(p._instance(), CheckPtr(value))
}

func (p *TProgressBar) Position() int32 {
	return ProgressBar_GetPosition(p._instance())
}

func (p *TProgressBar) SetPosition(value int32) {
	ProgressBar_SetPosition(p._instance(), value)
}

func (p *TProgressBar) Smooth() bool {
	return ProgressBar_GetSmooth(p._instance())
}

func (p *TProgressBar) SetSmooth(value bool) {
	ProgressBar_SetSmooth(p._instance(), value)
}

func (p *TProgressBar) Style() TProgressBarStyle {
	return ProgressBar_GetStyle(p._instance())
}

func (p *TProgressBar) SetStyle(value TProgressBarStyle) {
	ProgressBar_SetStyle(p._instance(), value)
}

func (p *TProgressBar) Step() int32 {
	return ProgressBar_GetStep(p._instance())
}

func (p *TProgressBar) SetStep(value int32) {
	ProgressBar_SetStep(p._instance(), value)
}

// ShowHint
//
// 获取显示鼠标悬停提示。
//
// Get Show mouseover tips.
func (p *TProgressBar) ShowHint() bool {
	return ProgressBar_GetShowHint(p._instance())
}

// SetShowHint
//
// 设置显示鼠标悬停提示。
//
// Set Show mouseover tips.
func (p *TProgressBar) SetShowHint(value bool) {
	ProgressBar_SetShowHint(p._instance(), value)
}

// TabOrder
//
// 获取Tab切换顺序序号。
//
// Get Tab switching sequence number.
func (p *TProgressBar) TabOrder() TTabOrder {
	return ProgressBar_GetTabOrder(p._instance())
}

// SetTabOrder
//
// 设置Tab切换顺序序号。
//
// Set Tab switching sequence number.
func (p *TProgressBar) SetTabOrder(value TTabOrder) {
	ProgressBar_SetTabOrder(p._instance(), value)
}

// TabStop
//
// 获取Tab可停留。
//
// Get Tab can stay.
func (p *TProgressBar) TabStop() bool {
	return ProgressBar_GetTabStop(p._instance())
}

// SetTabStop
//
// 设置Tab可停留。
//
// Set Tab can stay.
func (p *TProgressBar) SetTabStop(value bool) {
	ProgressBar_SetTabStop(p._instance(), value)
}

// Visible
//
// 获取控件可视。
//
// Get the control visible.
func (p *TProgressBar) Visible() bool {
	return ProgressBar_GetVisible(p._instance())
}

// SetVisible
//
// 设置控件可视。
//
// Set the control visible.
func (p *TProgressBar) SetVisible(value bool) {
	ProgressBar_SetVisible(p._instance(), value)
}

// SetOnContextPopup
//
// 设置上下文弹出事件，一般是右键时弹出。
//
// Set Context popup event, usually pop up when right click.
func (p *TProgressBar) SetOnContextPopup(fn TContextPopupEvent) {
	ProgressBar_SetOnContextPopup(p._instance(), fn)
}

// SetOnDragDrop
//
// 设置拖拽下落事件。
//
// Set Drag and drop event.
func (p *TProgressBar) SetOnDragDrop(fn TDragDropEvent) {
	ProgressBar_SetOnDragDrop(p._instance(), fn)
}

// SetOnDragOver
//
// 设置拖拽完成事件。
//
// Set Drag and drop completion event.
func (p *TProgressBar) SetOnDragOver(fn TDragOverEvent) {
	ProgressBar_SetOnDragOver(p._instance(), fn)
}

// SetOnEndDrag
//
// 设置拖拽结束。
//
// Set End of drag.
func (p *TProgressBar) SetOnEndDrag(fn TEndDragEvent) {
	ProgressBar_SetOnEndDrag(p._instance(), fn)
}

// SetOnEnter
//
// 设置焦点进入。
//
// Set Focus entry.
func (p *TProgressBar) SetOnEnter(fn TNotifyEvent) {
	ProgressBar_SetOnEnter(p._instance(), fn)
}

// SetOnExit
//
// 设置焦点退出。
//
// Set Focus exit.
func (p *TProgressBar) SetOnExit(fn TNotifyEvent) {
	ProgressBar_SetOnExit(p._instance(), fn)
}

// SetOnMouseDown
//
// 设置鼠标按下事件。
//
// Set Mouse down event.
func (p *TProgressBar) SetOnMouseDown(fn TMouseEvent) {
	ProgressBar_SetOnMouseDown(p._instance(), fn)
}

// SetOnMouseEnter
//
// 设置鼠标进入事件。
//
// Set Mouse entry event.
func (p *TProgressBar) SetOnMouseEnter(fn TNotifyEvent) {
	ProgressBar_SetOnMouseEnter(p._instance(), fn)
}

// SetOnMouseLeave
//
// 设置鼠标离开事件。
//
// Set Mouse leave event.
func (p *TProgressBar) SetOnMouseLeave(fn TNotifyEvent) {
	ProgressBar_SetOnMouseLeave(p._instance(), fn)
}

// SetOnMouseMove
//
// 设置鼠标移动事件。
func (p *TProgressBar) SetOnMouseMove(fn TMouseMoveEvent) {
	ProgressBar_SetOnMouseMove(p._instance(), fn)
}

// SetOnMouseUp
//
// 设置鼠标抬起事件。
//
// Set Mouse lift event.
func (p *TProgressBar) SetOnMouseUp(fn TMouseEvent) {
	ProgressBar_SetOnMouseUp(p._instance(), fn)
}

// DockClientCount
//
// 获取依靠客户端总数。
func (p *TProgressBar) DockClientCount() int32 {
	return ProgressBar_GetDockClientCount(p._instance())
}

// DockSite
//
// 获取停靠站点。
//
// Get Docking site.
func (p *TProgressBar) DockSite() bool {
	return ProgressBar_GetDockSite(p._instance())
}

// SetDockSite
//
// 设置停靠站点。
//
// Set Docking site.
func (p *TProgressBar) SetDockSite(value bool) {
	ProgressBar_SetDockSite(p._instance(), value)
}

// MouseInClient
//
// 获取鼠标是否在客户端，仅VCL有效。
//
// Get Whether the mouse is on the client, only VCL is valid.
func (p *TProgressBar) MouseInClient() bool {
	return ProgressBar_GetMouseInClient(p._instance())
}

// VisibleDockClientCount
//
// 获取当前停靠的可视总数。
//
// Get The total number of visible calls currently docked.
func (p *TProgressBar) VisibleDockClientCount() int32 {
	return ProgressBar_GetVisibleDockClientCount(p._instance())
}

// Brush
//
// 获取画刷对象。
//
// Get Brush.
func (p *TProgressBar) Brush() *TBrush {
	return AsBrush(ProgressBar_GetBrush(p._instance()))
}

// ControlCount
//
// 获取子控件数。
//
// Get Number of child controls.
func (p *TProgressBar) ControlCount() int32 {
	return ProgressBar_GetControlCount(p._instance())
}

// Handle
//
// 获取控件句柄。
//
// Get Control handle.
func (p *TProgressBar) Handle() HWND {
	return ProgressBar_GetHandle(p._instance())
}

// ParentWindow
//
// 获取父容器句柄。
//
// Get Parent container handle.
func (p *TProgressBar) ParentWindow() HWND {
	return ProgressBar_GetParentWindow(p._instance())
}

// SetParentWindow
//
// 设置父容器句柄。
//
// Set Parent container handle.
func (p *TProgressBar) SetParentWindow(value HWND) {
	ProgressBar_SetParentWindow(p._instance(), value)
}

func (p *TProgressBar) Showing() bool {
	return ProgressBar_GetShowing(p._instance())
}

// UseDockManager
//
// 获取使用停靠管理。
func (p *TProgressBar) UseDockManager() bool {
	return ProgressBar_GetUseDockManager(p._instance())
}

// SetUseDockManager
//
// 设置使用停靠管理。
func (p *TProgressBar) SetUseDockManager(value bool) {
	ProgressBar_SetUseDockManager(p._instance(), value)
}

func (p *TProgressBar) Action() *TAction {
	return AsAction(ProgressBar_GetAction(p._instance()))
}

func (p *TProgressBar) SetAction(value IComponent) {
	ProgressBar_SetAction(p._instance(), CheckPtr(value))
}

func (p *TProgressBar) BiDiMode() TBiDiMode {
	return ProgressBar_GetBiDiMode(p._instance())
}

func (p *TProgressBar) SetBiDiMode(value TBiDiMode) {
	ProgressBar_SetBiDiMode(p._instance(), value)
}

func (p *TProgressBar) BoundsRect() TRect {
	return ProgressBar_GetBoundsRect(p._instance())
}

func (p *TProgressBar) SetBoundsRect(value TRect) {
	ProgressBar_SetBoundsRect(p._instance(), value)
}

// ClientHeight
//
// 获取客户区高度。
//
// Get client height.
func (p *TProgressBar) ClientHeight() int32 {
	return ProgressBar_GetClientHeight(p._instance())
}

// SetClientHeight
//
// 设置客户区高度。
//
// Set client height.
func (p *TProgressBar) SetClientHeight(value int32) {
	ProgressBar_SetClientHeight(p._instance(), value)
}

func (p *TProgressBar) ClientOrigin() TPoint {
	return ProgressBar_GetClientOrigin(p._instance())
}

// ClientRect
//
// 获取客户区矩形。
//
// Get client rectangle.
func (p *TProgressBar) ClientRect() TRect {
	return ProgressBar_GetClientRect(p._instance())
}

// ClientWidth
//
// 获取客户区宽度。
//
// Get client width.
func (p *TProgressBar) ClientWidth() int32 {
	return ProgressBar_GetClientWidth(p._instance())
}

// SetClientWidth
//
// 设置客户区宽度。
//
// Set client width.
func (p *TProgressBar) SetClientWidth(value int32) {
	ProgressBar_SetClientWidth(p._instance(), value)
}

// ControlState
//
// 获取控件状态。
//
// Get control state.
func (p *TProgressBar) ControlState() TControlState {
	return ProgressBar_GetControlState(p._instance())
}

// SetControlState
//
// 设置控件状态。
//
// Set control state.
func (p *TProgressBar) SetControlState(value TControlState) {
	ProgressBar_SetControlState(p._instance(), value)
}

// ControlStyle
//
// 获取控件样式。
//
// Get control style.
func (p *TProgressBar) ControlStyle() TControlStyle {
	return ProgressBar_GetControlStyle(p._instance())
}

// SetControlStyle
//
// 设置控件样式。
//
// Set control style.
func (p *TProgressBar) SetControlStyle(value TControlStyle) {
	ProgressBar_SetControlStyle(p._instance(), value)
}

func (p *TProgressBar) Floating() bool {
	return ProgressBar_GetFloating(p._instance())
}

// Parent
//
// 获取控件父容器。
//
// Get control parent container.
func (p *TProgressBar) Parent() *TWinControl {
	return AsWinControl(ProgressBar_GetParent(p._instance()))
}

// SetParent
//
// 设置控件父容器。
//
// Set control parent container.
func (p *TProgressBar) SetParent(value IWinControl) {
	ProgressBar_SetParent(p._instance(), CheckPtr(value))
}

// Left
//
// 获取左边位置。
//
// Get Left position.
func (p *TProgressBar) Left() int32 {
	return ProgressBar_GetLeft(p._instance())
}

// SetLeft
//
// 设置左边位置。
//
// Set Left position.
func (p *TProgressBar) SetLeft(value int32) {
	ProgressBar_SetLeft(p._instance(), value)
}

// Top
//
// 获取顶边位置。
//
// Get Top position.
func (p *TProgressBar) Top() int32 {
	return ProgressBar_GetTop(p._instance())
}

// SetTop
//
// 设置顶边位置。
//
// Set Top position.
func (p *TProgressBar) SetTop(value int32) {
	ProgressBar_SetTop(p._instance(), value)
}

// Width
//
// 获取宽度。
//
// Get width.
func (p *TProgressBar) Width() int32 {
	return ProgressBar_GetWidth(p._instance())
}

// SetWidth
//
// 设置宽度。
//
// Set width.
func (p *TProgressBar) SetWidth(value int32) {
	ProgressBar_SetWidth(p._instance(), value)
}

// Height
//
// 获取高度。
//
// Get height.
func (p *TProgressBar) Height() int32 {
	return ProgressBar_GetHeight(p._instance())
}

// SetHeight
//
// 设置高度。
//
// Set height.
func (p *TProgressBar) SetHeight(value int32) {
	ProgressBar_SetHeight(p._instance(), value)
}

// Cursor
//
// 获取控件光标。
//
// Get control cursor.
func (p *TProgressBar) Cursor() TCursor {
	return ProgressBar_GetCursor(p._instance())
}

// SetCursor
//
// 设置控件光标。
//
// Set control cursor.
func (p *TProgressBar) SetCursor(value TCursor) {
	ProgressBar_SetCursor(p._instance(), value)
}

// ComponentCount
//
// 获取组件总数。
//
// Get the total number of components.
func (p *TProgressBar) ComponentCount() int32 {
	return ProgressBar_GetComponentCount(p._instance())
}

// ComponentIndex
//
// 获取组件索引。
//
// Get component index.
func (p *TProgressBar) ComponentIndex() int32 {
	return ProgressBar_GetComponentIndex(p._instance())
}

// SetComponentIndex
//
// 设置组件索引。
//
// Set component index.
func (p *TProgressBar) SetComponentIndex(value int32) {
	ProgressBar_SetComponentIndex(p._instance(), value)
}

// Owner
//
// 获取组件所有者。
//
// Get component owner.
func (p *TProgressBar) Owner() *TComponent {
	return AsComponent(ProgressBar_GetOwner(p._instance()))
}

// Name
//
// 获取组件名称。
//
// Get the component name.
func (p *TProgressBar) Name() string {
	return ProgressBar_GetName(p._instance())
}

// SetName
//
// 设置组件名称。
//
// Set the component name.
func (p *TProgressBar) SetName(value string) {
	ProgressBar_SetName(p._instance(), value)
}

// Tag
//
// 获取对象标记。
//
// Get the control tag.
func (p *TProgressBar) Tag() int {
	return ProgressBar_GetTag(p._instance())
}

// SetTag
//
// 设置对象标记。
//
// Set the control tag.
func (p *TProgressBar) SetTag(value int) {
	ProgressBar_SetTag(p._instance(), value)
}

// AnchorSideLeft
//
// 获取左边锚点。
func (p *TProgressBar) AnchorSideLeft() *TAnchorSide {
	return AsAnchorSide(ProgressBar_GetAnchorSideLeft(p._instance()))
}

// SetAnchorSideLeft
//
// 设置左边锚点。
func (p *TProgressBar) SetAnchorSideLeft(value *TAnchorSide) {
	ProgressBar_SetAnchorSideLeft(p._instance(), CheckPtr(value))
}

// AnchorSideTop
//
// 获取顶边锚点。
func (p *TProgressBar) AnchorSideTop() *TAnchorSide {
	return AsAnchorSide(ProgressBar_GetAnchorSideTop(p._instance()))
}

// SetAnchorSideTop
//
// 设置顶边锚点。
func (p *TProgressBar) SetAnchorSideTop(value *TAnchorSide) {
	ProgressBar_SetAnchorSideTop(p._instance(), CheckPtr(value))
}

// AnchorSideRight
//
// 获取右边锚点。
func (p *TProgressBar) AnchorSideRight() *TAnchorSide {
	return AsAnchorSide(ProgressBar_GetAnchorSideRight(p._instance()))
}

// SetAnchorSideRight
//
// 设置右边锚点。
func (p *TProgressBar) SetAnchorSideRight(value *TAnchorSide) {
	ProgressBar_SetAnchorSideRight(p._instance(), CheckPtr(value))
}

// AnchorSideBottom
//
// 获取底边锚点。
func (p *TProgressBar) AnchorSideBottom() *TAnchorSide {
	return AsAnchorSide(ProgressBar_GetAnchorSideBottom(p._instance()))
}

// SetAnchorSideBottom
//
// 设置底边锚点。
func (p *TProgressBar) SetAnchorSideBottom(value *TAnchorSide) {
	ProgressBar_SetAnchorSideBottom(p._instance(), CheckPtr(value))
}

func (p *TProgressBar) ChildSizing() *TControlChildSizing {
	return AsControlChildSizing(ProgressBar_GetChildSizing(p._instance()))
}

func (p *TProgressBar) SetChildSizing(value *TControlChildSizing) {
	ProgressBar_SetChildSizing(p._instance(), CheckPtr(value))
}

// BorderSpacing
//
// 获取边框间距。
func (p *TProgressBar) BorderSpacing() *TControlBorderSpacing {
	return AsControlBorderSpacing(ProgressBar_GetBorderSpacing(p._instance()))
}

// SetBorderSpacing
//
// 设置边框间距。
func (p *TProgressBar) SetBorderSpacing(value *TControlBorderSpacing) {
	ProgressBar_SetBorderSpacing(p._instance(), CheckPtr(value))
}

// DockClients
//
// 获取指定索引停靠客户端。
func (p *TProgressBar) DockClients(Index int32) *TControl {
	return AsControl(ProgressBar_GetDockClients(p._instance(), Index))
}

// Controls
//
// 获取指定索引子控件。
func (p *TProgressBar) Controls(Index int32) *TControl {
	return AsControl(ProgressBar_GetControls(p._instance(), Index))
}

// Components
//
// 获取指定索引组件。
//
// Get the specified index component.
func (p *TProgressBar) Components(AIndex int32) *TComponent {
	return AsComponent(ProgressBar_GetComponents(p._instance(), AIndex))
}

// AnchorSide
//
// 获取锚侧面。
func (p *TProgressBar) AnchorSide(AKind TAnchorKind) *TAnchorSide {
	return AsAnchorSide(ProgressBar_GetAnchorSide(p._instance(), AKind))
}
