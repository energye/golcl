//----------------------------------------
// The code is automatically generated by the GenlibLcl tool.
// Copyright © ying32. All Rights Reserved.
//
// Licensed under Apache License 2.0
//
//----------------------------------------

package lcl

import (
	. "github.com/energye/golcl/lcl/api"
	. "github.com/energye/golcl/lcl/types"
	"unsafe"
)

type TTextAttributes struct {
	IObject
	instance unsafe.Pointer
}

// AsTextAttributes
//
// 动态转换一个已存在的对象实例。
//
// Dynamically convert an existing object instance.
func AsTextAttributes(obj interface{}) *TTextAttributes {
	instance := getInstance(obj)
	if instance == nullptr {
		return nil
	}
	return &TTextAttributes{instance: instance}
}

func (t *TTextAttributes) _instance() uintptr {
	return uintptr(t.instance)
}

// Instance
//
// 返回对象实例指针。
//
// Return object instance pointer.
func (t *TTextAttributes) Instance() uintptr {
	return t._instance()
}

// UnsafeAddr
//
// 获取一个不安全的地址。
//
// Get an unsafe address.
func (t *TTextAttributes) UnsafeAddr() unsafe.Pointer {
	return t.instance
}

// IsValid
//
// 检测地址是否为空。
//
// Check if the address is empty.
func (t *TTextAttributes) IsValid() bool {
	return t.instance != nullptr
}

// Is
//
// 检测当前对象是否继承自目标对象。
//
// Checks whether the current object is inherited from the target object.
func (t *TTextAttributes) Is() TIs {
	return TIs(t._instance())
}

// As
//
// 动态转换当前对象为目标对象。
//
// Dynamically convert the current object to the target object.
//func (t *TTextAttributes) As() TAs {
//    return TAs(t._instance())
//}

// TTextAttributesClass
//
// 获取类信息指针。
//
// Get class information pointer.
func TTextAttributesClass() TClass {
	return TextAttributes_StaticClassType()
}

// Assign
//
// 复制一个对象，如果对象实现了此方法的话。
//
// Copy an object, if the object implements this method.
func (t *TTextAttributes) Assign(Source IObject) {
	TextAttributes_Assign(t._instance(), CheckPtr(Source))
}

// GetNamePath
//
// 获取类名路径。
//
// Get the class name path.
func (t *TTextAttributes) GetNamePath() string {
	return TextAttributes_GetNamePath(t._instance())
}

// ClassType
//
// 获取类的类型信息。
//
// Get class type information.
func (t *TTextAttributes) ClassType() TClass {
	return TextAttributes_ClassType(t._instance())
}

// ClassName
//
// 获取当前对象类名称。
//
// Get the current object class name.
func (t *TTextAttributes) ClassName() string {
	return TextAttributes_ClassName(t._instance())
}

// InstanceSize
//
// 获取当前对象实例大小。
//
// Get the current object instance size.
func (t *TTextAttributes) InstanceSize() int32 {
	return TextAttributes_InstanceSize(t._instance())
}

// InheritsFrom
//
// 判断当前类是否继承自指定类。
//
// Determine whether the current class inherits from the specified class.
func (t *TTextAttributes) InheritsFrom(AClass TClass) bool {
	return TextAttributes_InheritsFrom(t._instance(), AClass)
}

// Equals
//
// 与一个对象进行比较。
//
// Compare with an object.
func (t *TTextAttributes) Equals(Obj IObject) bool {
	return TextAttributes_Equals(t._instance(), CheckPtr(Obj))
}

// GetHashCode
//
// 获取类的哈希值。
//
// Get the hash value of the class.
func (t *TTextAttributes) GetHashCode() int32 {
	return TextAttributes_GetHashCode(t._instance())
}

// ToString
//
// 文本类信息。
//
// Text information.
func (t *TTextAttributes) ToString() string {
	return TextAttributes_ToString(t._instance())
}

func (t *TTextAttributes) Charset() TFontCharset {
	return TextAttributes_GetCharset(t._instance())
}

func (t *TTextAttributes) SetCharset(value TFontCharset) {
	TextAttributes_SetCharset(t._instance(), value)
}

// Color
//
// 获取颜色。
//
// Get color.
func (t *TTextAttributes) Color() TColor {
	return TextAttributes_GetColor(t._instance())
}

// SetColor
//
// 设置颜色。
//
// Set color.
func (t *TTextAttributes) SetColor(value TColor) {
	TextAttributes_SetColor(t._instance(), value)
}

// Name
//
// 获取组件名称。
//
// Get the component name.
func (t *TTextAttributes) Name() string {
	return TextAttributes_GetName(t._instance())
}

// SetName
//
// 设置组件名称。
//
// Set the component name.
func (t *TTextAttributes) SetName(value string) {
	TextAttributes_SetName(t._instance(), value)
}

func (t *TTextAttributes) Pitch() TFontPitch {
	return TextAttributes_GetPitch(t._instance())
}

func (t *TTextAttributes) SetPitch(value TFontPitch) {
	TextAttributes_SetPitch(t._instance(), value)
}

func (t *TTextAttributes) Size() int32 {
	return TextAttributes_GetSize(t._instance())
}

func (t *TTextAttributes) SetSize(value int32) {
	TextAttributes_SetSize(t._instance(), value)
}

func (t *TTextAttributes) Style() TFontStyles {
	return TextAttributes_GetStyle(t._instance())
}

func (t *TTextAttributes) SetStyle(value TFontStyles) {
	TextAttributes_SetStyle(t._instance(), value)
}

// Height
//
// 获取高度。
//
// Get height.
func (t *TTextAttributes) Height() int32 {
	return TextAttributes_GetHeight(t._instance())
}

// SetHeight
//
// 设置高度。
//
// Set height.
func (t *TTextAttributes) SetHeight(value int32) {
	TextAttributes_SetHeight(t._instance(), value)
}
