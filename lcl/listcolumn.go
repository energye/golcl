//----------------------------------------
// The code is automatically generated by the GenlibLcl tool.
// Copyright © ying32. All Rights Reserved.
//
// Licensed under Apache License 2.0
//
//----------------------------------------

package lcl

import (
	. "github.com/energye/golcl/lcl/api"
	. "github.com/energye/golcl/lcl/types"
	"unsafe"
)

type TListColumn struct {
	IObject
	instance unsafe.Pointer
}

// NewListColumn
//
// 创建一个新的对象。
//
// Create a new object.
func NewListColumn(AOwner *TCollection) *TListColumn {
	l := new(TListColumn)
	l.instance = unsafe.Pointer(ListColumn_Create(CheckPtr(AOwner)))
	setFinalizer(l, (*TListColumn).Free)
	return l
}

// AsListColumn
//
// 动态转换一个已存在的对象实例。
//
// Dynamically convert an existing object instance.
func AsListColumn(obj interface{}) *TListColumn {
	instance := getInstance(obj)
	if instance == nullptr {
		return nil
	}
	return &TListColumn{instance: instance}
}

// Free
//
// 释放对象。
//
// Free object.
func (l *TListColumn) Free() {
	if l.instance != nullptr {
		ListColumn_Free(l._instance())
		l.instance = nullptr
	}
}

func (l *TListColumn) _instance() uintptr {
	return uintptr(l.instance)
}

// Instance
//
// 返回对象实例指针。
//
// Return object instance pointer.
func (l *TListColumn) Instance() uintptr {
	return l._instance()
}

// UnsafeAddr
//
// 获取一个不安全的地址。
//
// Get an unsafe address.
func (l *TListColumn) UnsafeAddr() unsafe.Pointer {
	return l.instance
}

// IsValid
//
// 检测地址是否为空。
//
// Check if the address is empty.
func (l *TListColumn) IsValid() bool {
	return l.instance != nullptr
}

// Is
//
// 检测当前对象是否继承自目标对象。
//
// Checks whether the current object is inherited from the target object.
func (l *TListColumn) Is() TIs {
	return TIs(l._instance())
}

// As
//
// 动态转换当前对象为目标对象。
//
// Dynamically convert the current object to the target object.
//func (l *TListColumn) As() TAs {
//    return TAs(l._instance())
//}

// TListColumnClass
//
// 获取类信息指针。
//
// Get class information pointer.
func TListColumnClass() TClass {
	return ListColumn_StaticClassType()
}

// Assign
//
// 复制一个对象，如果对象实现了此方法的话。
//
// Copy an object, if the object implements this method.
func (l *TListColumn) Assign(Source IObject) {
	ListColumn_Assign(l._instance(), CheckPtr(Source))
}

// GetNamePath
//
// 获取类名路径。
//
// Get the class name path.
func (l *TListColumn) GetNamePath() string {
	return ListColumn_GetNamePath(l._instance())
}

// ClassType
//
// 获取类的类型信息。
//
// Get class type information.
func (l *TListColumn) ClassType() TClass {
	return ListColumn_ClassType(l._instance())
}

// ClassName
//
// 获取当前对象类名称。
//
// Get the current object class name.
func (l *TListColumn) ClassName() string {
	return ListColumn_ClassName(l._instance())
}

// InstanceSize
//
// 获取当前对象实例大小。
//
// Get the current object instance size.
func (l *TListColumn) InstanceSize() int32 {
	return ListColumn_InstanceSize(l._instance())
}

// InheritsFrom
//
// 判断当前类是否继承自指定类。
//
// Determine whether the current class inherits from the specified class.
func (l *TListColumn) InheritsFrom(AClass TClass) bool {
	return ListColumn_InheritsFrom(l._instance(), AClass)
}

// Equals
//
// 与一个对象进行比较。
//
// Compare with an object.
func (l *TListColumn) Equals(Obj IObject) bool {
	return ListColumn_Equals(l._instance(), CheckPtr(Obj))
}

// GetHashCode
//
// 获取类的哈希值。
//
// Get the hash value of the class.
func (l *TListColumn) GetHashCode() int32 {
	return ListColumn_GetHashCode(l._instance())
}

// ToString
//
// 文本类信息。
//
// Text information.
func (l *TListColumn) ToString() string {
	return ListColumn_ToString(l._instance())
}

func (l *TListColumn) SortIndicator() TSortIndicator {
	return ListColumn_GetSortIndicator(l._instance())
}

func (l *TListColumn) SetSortIndicator(value TSortIndicator) {
	ListColumn_SetSortIndicator(l._instance(), value)
}

// Alignment
//
// 获取文字对齐。
//
// Get Text alignment.
func (l *TListColumn) Alignment() TAlignment {
	return ListColumn_GetAlignment(l._instance())
}

// SetAlignment
//
// 设置文字对齐。
//
// Set Text alignment.
func (l *TListColumn) SetAlignment(value TAlignment) {
	ListColumn_SetAlignment(l._instance(), value)
}

// AutoSize
//
// 获取自动调整大小。
func (l *TListColumn) AutoSize() bool {
	return ListColumn_GetAutoSize(l._instance())
}

// SetAutoSize
//
// 设置自动调整大小。
func (l *TListColumn) SetAutoSize(value bool) {
	ListColumn_SetAutoSize(l._instance(), value)
}

// Caption
//
// 获取控件标题。
//
// Get the control title.
func (l *TListColumn) Caption() string {
	return ListColumn_GetCaption(l._instance())
}

// SetCaption
//
// 设置控件标题。
//
// Set the control title.
func (l *TListColumn) SetCaption(value string) {
	ListColumn_SetCaption(l._instance(), value)
}

// ImageIndex
//
// 获取图像在images中的索引。
func (l *TListColumn) ImageIndex() int32 {
	return ListColumn_GetImageIndex(l._instance())
}

// SetImageIndex
//
// 设置图像在images中的索引。
func (l *TListColumn) SetImageIndex(value int32) {
	ListColumn_SetImageIndex(l._instance(), value)
}

func (l *TListColumn) MaxWidth() int32 {
	return ListColumn_GetMaxWidth(l._instance())
}

func (l *TListColumn) SetMaxWidth(value int32) {
	ListColumn_SetMaxWidth(l._instance(), value)
}

func (l *TListColumn) MinWidth() int32 {
	return ListColumn_GetMinWidth(l._instance())
}

func (l *TListColumn) SetMinWidth(value int32) {
	ListColumn_SetMinWidth(l._instance(), value)
}

// Tag
//
// 获取对象标记。
//
// Get the control tag.
func (l *TListColumn) Tag() int32 {
	return ListColumn_GetTag(l._instance())
}

// SetTag
//
// 设置对象标记。
//
// Set the control tag.
func (l *TListColumn) SetTag(value int32) {
	ListColumn_SetTag(l._instance(), value)
}

// Width
//
// 获取宽度。
//
// Get width.
func (l *TListColumn) Width() int32 {
	return ListColumn_GetWidth(l._instance())
}

// SetWidth
//
// 设置宽度。
//
// Set width.
func (l *TListColumn) SetWidth(value int32) {
	ListColumn_SetWidth(l._instance(), value)
}

func (l *TListColumn) Collection() *TCollection {
	return AsCollection(ListColumn_GetCollection(l._instance()))
}

func (l *TListColumn) SetCollection(value *TCollection) {
	ListColumn_SetCollection(l._instance(), CheckPtr(value))
}

func (l *TListColumn) Index() int32 {
	return ListColumn_GetIndex(l._instance())
}

func (l *TListColumn) SetIndex(value int32) {
	ListColumn_SetIndex(l._instance(), value)
}

func (l *TListColumn) DisplayName() string {
	return ListColumn_GetDisplayName(l._instance())
}

func (l *TListColumn) SetDisplayName(value string) {
	ListColumn_SetDisplayName(l._instance(), value)
}
