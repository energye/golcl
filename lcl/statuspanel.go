//----------------------------------------
// The code is automatically generated by the GenlibLcl tool.
// Copyright © ying32. All Rights Reserved.
//
// Licensed under Apache License 2.0
//
//----------------------------------------

package lcl

import (
	. "github.com/energye/golcl/lcl/api"
	. "github.com/energye/golcl/lcl/types"
	"unsafe"
)

type TStatusPanel struct {
	IObject
	instance unsafe.Pointer
}

// NewStatusPanel
//
// 创建一个新的对象。
//
// Create a new object.
func NewStatusPanel(AOwner *TCollection) *TStatusPanel {
	s := new(TStatusPanel)
	s.instance = unsafe.Pointer(StatusPanel_Create(CheckPtr(AOwner)))
	setFinalizer(s, (*TStatusPanel).Free)
	return s
}

// AsStatusPanel
//
// 动态转换一个已存在的对象实例。
//
// Dynamically convert an existing object instance.
func AsStatusPanel(obj interface{}) *TStatusPanel {
	instance := getInstance(obj)
	if instance == nullptr {
		return nil
	}
	return &TStatusPanel{instance: instance}
}

// Free
//
// 释放对象。
//
// Free object.
func (s *TStatusPanel) Free() {
	if s.instance != nullptr {
		StatusPanel_Free(s._instance())
		s.instance = nullptr
	}
}

func (s *TStatusPanel) _instance() uintptr {
	return uintptr(s.instance)
}

// Instance
//
// 返回对象实例指针。
//
// Return object instance pointer.
func (s *TStatusPanel) Instance() uintptr {
	return s._instance()
}

// UnsafeAddr
//
// 获取一个不安全的地址。
//
// Get an unsafe address.
func (s *TStatusPanel) UnsafeAddr() unsafe.Pointer {
	return s.instance
}

// IsValid
//
// 检测地址是否为空。
//
// Check if the address is empty.
func (s *TStatusPanel) IsValid() bool {
	return s.instance != nullptr
}

// Is
//
// 检测当前对象是否继承自目标对象。
//
// Checks whether the current object is inherited from the target object.
func (s *TStatusPanel) Is() TIs {
	return TIs(s._instance())
}

// As
//
// 动态转换当前对象为目标对象。
//
// Dynamically convert the current object to the target object.
//func (s *TStatusPanel) As() TAs {
//    return TAs(s._instance())
//}

// TStatusPanelClass
//
// 获取类信息指针。
//
// Get class information pointer.
func TStatusPanelClass() TClass {
	return StatusPanel_StaticClassType()
}

// Assign
//
// 复制一个对象，如果对象实现了此方法的话。
//
// Copy an object, if the object implements this method.
func (s *TStatusPanel) Assign(Source IObject) {
	StatusPanel_Assign(s._instance(), CheckPtr(Source))
}

// GetNamePath
//
// 获取类名路径。
//
// Get the class name path.
func (s *TStatusPanel) GetNamePath() string {
	return StatusPanel_GetNamePath(s._instance())
}

// ClassType
//
// 获取类的类型信息。
//
// Get class type information.
func (s *TStatusPanel) ClassType() TClass {
	return StatusPanel_ClassType(s._instance())
}

// ClassName
//
// 获取当前对象类名称。
//
// Get the current object class name.
func (s *TStatusPanel) ClassName() string {
	return StatusPanel_ClassName(s._instance())
}

// InstanceSize
//
// 获取当前对象实例大小。
//
// Get the current object instance size.
func (s *TStatusPanel) InstanceSize() int32 {
	return StatusPanel_InstanceSize(s._instance())
}

// InheritsFrom
//
// 判断当前类是否继承自指定类。
//
// Determine whether the current class inherits from the specified class.
func (s *TStatusPanel) InheritsFrom(AClass TClass) bool {
	return StatusPanel_InheritsFrom(s._instance(), AClass)
}

// Equals
//
// 与一个对象进行比较。
//
// Compare with an object.
func (s *TStatusPanel) Equals(Obj IObject) bool {
	return StatusPanel_Equals(s._instance(), CheckPtr(Obj))
}

// GetHashCode
//
// 获取类的哈希值。
//
// Get the hash value of the class.
func (s *TStatusPanel) GetHashCode() int32 {
	return StatusPanel_GetHashCode(s._instance())
}

// ToString
//
// 文本类信息。
//
// Text information.
func (s *TStatusPanel) ToString() string {
	return StatusPanel_ToString(s._instance())
}

// Alignment
//
// 获取文字对齐。
//
// Get Text alignment.
func (s *TStatusPanel) Alignment() TAlignment {
	return StatusPanel_GetAlignment(s._instance())
}

// SetAlignment
//
// 设置文字对齐。
//
// Set Text alignment.
func (s *TStatusPanel) SetAlignment(value TAlignment) {
	StatusPanel_SetAlignment(s._instance(), value)
}

func (s *TStatusPanel) BiDiMode() TBiDiMode {
	return StatusPanel_GetBiDiMode(s._instance())
}

func (s *TStatusPanel) SetBiDiMode(value TBiDiMode) {
	StatusPanel_SetBiDiMode(s._instance(), value)
}

func (s *TStatusPanel) Style() TStatusPanelStyle {
	return StatusPanel_GetStyle(s._instance())
}

func (s *TStatusPanel) SetStyle(value TStatusPanelStyle) {
	StatusPanel_SetStyle(s._instance(), value)
}

// Text
//
// 获取文本。
func (s *TStatusPanel) Text() string {
	return StatusPanel_GetText(s._instance())
}

// SetText
//
// 设置文本。
func (s *TStatusPanel) SetText(value string) {
	StatusPanel_SetText(s._instance(), value)
}

// Width
//
// 获取宽度。
//
// Get width.
func (s *TStatusPanel) Width() int32 {
	return StatusPanel_GetWidth(s._instance())
}

// SetWidth
//
// 设置宽度。
//
// Set width.
func (s *TStatusPanel) SetWidth(value int32) {
	StatusPanel_SetWidth(s._instance(), value)
}

func (s *TStatusPanel) Collection() *TCollection {
	return AsCollection(StatusPanel_GetCollection(s._instance()))
}

func (s *TStatusPanel) SetCollection(value *TCollection) {
	StatusPanel_SetCollection(s._instance(), CheckPtr(value))
}

func (s *TStatusPanel) Index() int32 {
	return StatusPanel_GetIndex(s._instance())
}

func (s *TStatusPanel) SetIndex(value int32) {
	StatusPanel_SetIndex(s._instance(), value)
}

func (s *TStatusPanel) DisplayName() string {
	return StatusPanel_GetDisplayName(s._instance())
}

func (s *TStatusPanel) SetDisplayName(value string) {
	StatusPanel_SetDisplayName(s._instance(), value)
}
