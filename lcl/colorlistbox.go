//----------------------------------------
// The code is automatically generated by the GenlibLcl tool.
// Copyright © ying32. All Rights Reserved.
//
// Licensed under Apache License 2.0
//
//----------------------------------------

package lcl

import (
	. "github.com/energye/golcl/lcl/api"
	. "github.com/energye/golcl/lcl/types"
	"unsafe"
)

type TColorListBox struct {
	IWinControl
	instance unsafe.Pointer
}

// NewColorListBox
//
// 创建一个新的对象。
//
// Create a new object.
func NewColorListBox(owner IComponent) *TColorListBox {
	c := new(TColorListBox)
	c.instance = unsafe.Pointer(ColorListBox_Create(CheckPtr(owner)))
	return c
}

// AsColorListBox
//
// 动态转换一个已存在的对象实例。
//
// Dynamically convert an existing object instance.
func AsColorListBox(obj interface{}) *TColorListBox {
	instance := getInstance(obj)
	if instance == nullptr {
		return nil
	}
	return &TColorListBox{instance: instance}
}

// Free
//
// 释放对象。
//
// Free object.
func (c *TColorListBox) Free() {
	if c.instance != nullptr {
		ColorListBox_Free(c._instance())
		c.instance = nullptr
	}
}

func (c *TColorListBox) _instance() uintptr {
	return uintptr(c.instance)
}

// Instance
//
// 返回对象实例指针。
//
// Return object instance pointer.
func (c *TColorListBox) Instance() uintptr {
	return c._instance()
}

// UnsafeAddr
//
// 获取一个不安全的地址。
//
// Get an unsafe address.
func (c *TColorListBox) UnsafeAddr() unsafe.Pointer {
	return c.instance
}

// IsValid
//
// 检测地址是否为空。
//
// Check if the address is empty.
func (c *TColorListBox) IsValid() bool {
	return c.instance != nullptr
}

// Is
//
// 检测当前对象是否继承自目标对象。
//
// Checks whether the current object is inherited from the target object.
func (c *TColorListBox) Is() TIs {
	return TIs(c._instance())
}

// As
//
// 动态转换当前对象为目标对象。
//
// Dynamically convert the current object to the target object.
//func (c *TColorListBox) As() TAs {
//    return TAs(c._instance())
//}

// TColorListBoxClass
//
// 获取类信息指针。
//
// Get class information pointer.
func TColorListBoxClass() TClass {
	return ColorListBox_StaticClassType()
}

func (c *TColorListBox) AddItem(Item string, AObject IObject) {
	ColorListBox_AddItem(c._instance(), Item, CheckPtr(AObject))
}

// Clear
//
// 清除。
func (c *TColorListBox) Clear() {
	ColorListBox_Clear(c._instance())
}

// ClearSelection
//
// 清除选择。
func (c *TColorListBox) ClearSelection() {
	ColorListBox_ClearSelection(c._instance())
}

// DeleteSelected
//
// 删除选择的。
func (c *TColorListBox) DeleteSelected() {
	ColorListBox_DeleteSelected(c._instance())
}

func (c *TColorListBox) ItemAtPos(Pos TPoint, Existing bool) int32 {
	return ColorListBox_ItemAtPos(c._instance(), Pos, Existing)
}

func (c *TColorListBox) ItemRect(Index int32) TRect {
	return ColorListBox_ItemRect(c._instance(), Index)
}

// SelectAll
//
// 全选。
func (c *TColorListBox) SelectAll() {
	ColorListBox_SelectAll(c._instance())
}

// CanFocus
//
// 是否可以获得焦点。
func (c *TColorListBox) CanFocus() bool {
	return ColorListBox_CanFocus(c._instance())
}

// ContainsControl
//
// 返回是否包含指定控件。
//
// it's contain a specified control.
func (c *TColorListBox) ContainsControl(Control IControl) bool {
	return ColorListBox_ContainsControl(c._instance(), CheckPtr(Control))
}

// ControlAtPos
//
// 返回指定坐标及相关属性位置控件。
//
// Returns the specified coordinate and the relevant attribute position control..
func (c *TColorListBox) ControlAtPos(Pos TPoint, AllowDisabled bool, AllowWinControls bool, AllLevels bool) *TControl {
	return AsControl(ColorListBox_ControlAtPos(c._instance(), Pos, AllowDisabled, AllowWinControls, AllLevels))
}

// DisableAlign
//
// 禁用控件的对齐。
//
// Disable control alignment.
func (c *TColorListBox) DisableAlign() {
	ColorListBox_DisableAlign(c._instance())
}

// EnableAlign
//
// 启用控件对齐。
//
// Enabled control alignment.
func (c *TColorListBox) EnableAlign() {
	ColorListBox_EnableAlign(c._instance())
}

// FindChildControl
//
// 查找子控件。
//
// Find sub controls.
func (c *TColorListBox) FindChildControl(ControlName string) *TControl {
	return AsControl(ColorListBox_FindChildControl(c._instance(), ControlName))
}

func (c *TColorListBox) FlipChildren(AllLevels bool) {
	ColorListBox_FlipChildren(c._instance(), AllLevels)
}

// Focused
//
// 返回是否获取焦点。
//
// Return to get focus.
func (c *TColorListBox) Focused() bool {
	return ColorListBox_Focused(c._instance())
}

// HandleAllocated
//
// 句柄是否已经分配。
//
// Is the handle already allocated.
func (c *TColorListBox) HandleAllocated() bool {
	return ColorListBox_HandleAllocated(c._instance())
}

// InsertControl
//
// 插入一个控件。
//
// Insert a control.
func (c *TColorListBox) InsertControl(AControl IControl) {
	ColorListBox_InsertControl(c._instance(), CheckPtr(AControl))
}

// Invalidate
//
// 要求重绘。
//
// Redraw.
func (c *TColorListBox) Invalidate() {
	ColorListBox_Invalidate(c._instance())
}

// PaintTo
//
// 绘画至指定DC。
//
// Painting to the specified DC.
func (c *TColorListBox) PaintTo(DC HDC, X int32, Y int32) {
	ColorListBox_PaintTo(c._instance(), DC, X, Y)
}

// RemoveControl
//
// 移除一个控件。
//
// Remove a control.
func (c *TColorListBox) RemoveControl(AControl IControl) {
	ColorListBox_RemoveControl(c._instance(), CheckPtr(AControl))
}

// Realign
//
// 重新对齐。
//
// Realign.
func (c *TColorListBox) Realign() {
	ColorListBox_Realign(c._instance())
}

// Repaint
//
// 重绘。
//
// Repaint.
func (c *TColorListBox) Repaint() {
	ColorListBox_Repaint(c._instance())
}

// ScaleBy
//
// 按比例缩放。
//
// Scale by.
func (c *TColorListBox) ScaleBy(M int32, D int32) {
	ColorListBox_ScaleBy(c._instance(), M, D)
}

// ScrollBy
//
// 滚动至指定位置。
//
// Scroll by.
func (c *TColorListBox) ScrollBy(DeltaX int32, DeltaY int32) {
	ColorListBox_ScrollBy(c._instance(), DeltaX, DeltaY)
}

// SetBounds
//
// 设置组件边界。
//
// Set component boundaries.
func (c *TColorListBox) SetBounds(ALeft int32, ATop int32, AWidth int32, AHeight int32) {
	ColorListBox_SetBounds(c._instance(), ALeft, ATop, AWidth, AHeight)
}

// SetFocus
//
// 设置控件焦点。
//
// Set control focus.
func (c *TColorListBox) SetFocus() {
	ColorListBox_SetFocus(c._instance())
}

// Update
//
// 控件更新。
//
// Update.
func (c *TColorListBox) Update() {
	ColorListBox_Update(c._instance())
}

// BringToFront
//
// 将控件置于最前。
//
// Bring the control to the front.
func (c *TColorListBox) BringToFront() {
	ColorListBox_BringToFront(c._instance())
}

// ClientToScreen
//
// 将客户端坐标转为绝对的屏幕坐标。
//
// Convert client coordinates to absolute screen coordinates.
func (c *TColorListBox) ClientToScreen(Point TPoint) TPoint {
	return ColorListBox_ClientToScreen(c._instance(), Point)
}

// ClientToParent
//
// 将客户端坐标转为父容器坐标。
//
// Convert client coordinates to parent container coordinates.
func (c *TColorListBox) ClientToParent(Point TPoint, AParent IWinControl) TPoint {
	return ColorListBox_ClientToParent(c._instance(), Point, CheckPtr(AParent))
}

// Dragging
//
// 是否在拖拽中。
//
// Is it in the middle of dragging.
func (c *TColorListBox) Dragging() bool {
	return ColorListBox_Dragging(c._instance())
}

// HasParent
//
// 是否有父容器。
//
// Is there a parent container.
func (c *TColorListBox) HasParent() bool {
	return ColorListBox_HasParent(c._instance())
}

// Hide
//
// 隐藏控件。
//
// Hidden control.
func (c *TColorListBox) Hide() {
	ColorListBox_Hide(c._instance())
}

// Perform
//
// 发送一个消息。
//
// Send a message.
func (c *TColorListBox) Perform(Msg uint32, WParam uintptr, LParam int) int {
	return ColorListBox_Perform(c._instance(), Msg, WParam, LParam)
}

// Refresh
//
// 刷新控件。
//
// Refresh control.
func (c *TColorListBox) Refresh() {
	ColorListBox_Refresh(c._instance())
}

// ScreenToClient
//
// 将屏幕坐标转为客户端坐标。
//
// Convert screen coordinates to client coordinates.
func (c *TColorListBox) ScreenToClient(Point TPoint) TPoint {
	return ColorListBox_ScreenToClient(c._instance(), Point)
}

// ParentToClient
//
// 将父容器坐标转为客户端坐标。
//
// Convert parent container coordinates to client coordinates.
func (c *TColorListBox) ParentToClient(Point TPoint, AParent IWinControl) TPoint {
	return ColorListBox_ParentToClient(c._instance(), Point, CheckPtr(AParent))
}

// SendToBack
//
// 控件至于最后面。
//
// The control is placed at the end.
func (c *TColorListBox) SendToBack() {
	ColorListBox_SendToBack(c._instance())
}

// Show
//
// 显示控件。
//
// Show control.
func (c *TColorListBox) Show() {
	ColorListBox_Show(c._instance())
}

// GetTextBuf
//
// 获取控件的字符，如果有。
//
// Get the characters of the control, if any.
func (c *TColorListBox) GetTextBuf(Buffer *string, BufSize int32) int32 {
	return ColorListBox_GetTextBuf(c._instance(), Buffer, BufSize)
}

// GetTextLen
//
// 获取控件的字符长，如果有。
//
// Get the character length of the control, if any.
func (c *TColorListBox) GetTextLen() int32 {
	return ColorListBox_GetTextLen(c._instance())
}

// SetTextBuf
//
// 设置控件字符，如果有。
//
// Set control characters, if any.
func (c *TColorListBox) SetTextBuf(Buffer string) {
	ColorListBox_SetTextBuf(c._instance(), Buffer)
}

// FindComponent
//
// 查找指定名称的组件。
//
// Find the component with the specified name.
func (c *TColorListBox) FindComponent(AName string) *TComponent {
	return AsComponent(ColorListBox_FindComponent(c._instance(), AName))
}

// GetNamePath
//
// 获取类名路径。
//
// Get the class name path.
func (c *TColorListBox) GetNamePath() string {
	return ColorListBox_GetNamePath(c._instance())
}

// Assign
//
// 复制一个对象，如果对象实现了此方法的话。
//
// Copy an object, if the object implements this method.
func (c *TColorListBox) Assign(Source IObject) {
	ColorListBox_Assign(c._instance(), CheckPtr(Source))
}

// ClassType
//
// 获取类的类型信息。
//
// Get class type information.
func (c *TColorListBox) ClassType() TClass {
	return ColorListBox_ClassType(c._instance())
}

// ClassName
//
// 获取当前对象类名称。
//
// Get the current object class name.
func (c *TColorListBox) ClassName() string {
	return ColorListBox_ClassName(c._instance())
}

// InstanceSize
//
// 获取当前对象实例大小。
//
// Get the current object instance size.
func (c *TColorListBox) InstanceSize() int32 {
	return ColorListBox_InstanceSize(c._instance())
}

// InheritsFrom
//
// 判断当前类是否继承自指定类。
//
// Determine whether the current class inherits from the specified class.
func (c *TColorListBox) InheritsFrom(AClass TClass) bool {
	return ColorListBox_InheritsFrom(c._instance(), AClass)
}

// Equals
//
// 与一个对象进行比较。
//
// Compare with an object.
func (c *TColorListBox) Equals(Obj IObject) bool {
	return ColorListBox_Equals(c._instance(), CheckPtr(Obj))
}

// GetHashCode
//
// 获取类的哈希值。
//
// Get the hash value of the class.
func (c *TColorListBox) GetHashCode() int32 {
	return ColorListBox_GetHashCode(c._instance())
}

// ToString
//
// 文本类信息。
//
// Text information.
func (c *TColorListBox) ToString() string {
	return ColorListBox_ToString(c._instance())
}

func (c *TColorListBox) AnchorToNeighbour(ASide TAnchorKind, ASpace int32, ASibling IControl) {
	ColorListBox_AnchorToNeighbour(c._instance(), ASide, ASpace, CheckPtr(ASibling))
}

func (c *TColorListBox) AnchorParallel(ASide TAnchorKind, ASpace int32, ASibling IControl) {
	ColorListBox_AnchorParallel(c._instance(), ASide, ASpace, CheckPtr(ASibling))
}

// AnchorHorizontalCenterTo
//
// 置于指定控件的横向中心。
func (c *TColorListBox) AnchorHorizontalCenterTo(ASibling IControl) {
	ColorListBox_AnchorHorizontalCenterTo(c._instance(), CheckPtr(ASibling))
}

// AnchorVerticalCenterTo
//
// 置于指定控件的纵向中心。
func (c *TColorListBox) AnchorVerticalCenterTo(ASibling IControl) {
	ColorListBox_AnchorVerticalCenterTo(c._instance(), CheckPtr(ASibling))
}

func (c *TColorListBox) AnchorSame(ASide TAnchorKind, ASibling IControl) {
	ColorListBox_AnchorSame(c._instance(), ASide, CheckPtr(ASibling))
}

func (c *TColorListBox) AnchorAsAlign(ATheAlign TAlign, ASpace int32) {
	ColorListBox_AnchorAsAlign(c._instance(), ATheAlign, ASpace)
}

func (c *TColorListBox) AnchorClient(ASpace int32) {
	ColorListBox_AnchorClient(c._instance(), ASpace)
}

func (c *TColorListBox) ScaleDesignToForm(ASize int32) int32 {
	return ColorListBox_ScaleDesignToForm(c._instance(), ASize)
}

func (c *TColorListBox) ScaleFormToDesign(ASize int32) int32 {
	return ColorListBox_ScaleFormToDesign(c._instance(), ASize)
}

func (c *TColorListBox) Scale96ToForm(ASize int32) int32 {
	return ColorListBox_Scale96ToForm(c._instance(), ASize)
}

func (c *TColorListBox) ScaleFormTo96(ASize int32) int32 {
	return ColorListBox_ScaleFormTo96(c._instance(), ASize)
}

func (c *TColorListBox) Scale96ToFont(ASize int32) int32 {
	return ColorListBox_Scale96ToFont(c._instance(), ASize)
}

func (c *TColorListBox) ScaleFontTo96(ASize int32) int32 {
	return ColorListBox_ScaleFontTo96(c._instance(), ASize)
}

func (c *TColorListBox) ScaleScreenToFont(ASize int32) int32 {
	return ColorListBox_ScaleScreenToFont(c._instance(), ASize)
}

func (c *TColorListBox) ScaleFontToScreen(ASize int32) int32 {
	return ColorListBox_ScaleFontToScreen(c._instance(), ASize)
}

func (c *TColorListBox) Scale96ToScreen(ASize int32) int32 {
	return ColorListBox_Scale96ToScreen(c._instance(), ASize)
}

func (c *TColorListBox) ScaleScreenTo96(ASize int32) int32 {
	return ColorListBox_ScaleScreenTo96(c._instance(), ASize)
}

func (c *TColorListBox) AutoAdjustLayout(AMode TLayoutAdjustmentPolicy, AFromPPI int32, AToPPI int32, AOldFormWidth int32, ANewFormWidth int32) {
	ColorListBox_AutoAdjustLayout(c._instance(), AMode, AFromPPI, AToPPI, AOldFormWidth, ANewFormWidth)
}

func (c *TColorListBox) FixDesignFontsPPI(ADesignTimePPI int32) {
	ColorListBox_FixDesignFontsPPI(c._instance(), ADesignTimePPI)
}

func (c *TColorListBox) ScaleFontsPPI(AToPPI int32, AProportion float64) {
	ColorListBox_ScaleFontsPPI(c._instance(), AToPPI, AProportion)
}

// Align
//
// 获取控件自动调整。
//
// Get Control automatically adjusts.
func (c *TColorListBox) Align() TAlign {
	return ColorListBox_GetAlign(c._instance())
}

// SetAlign
//
// 设置控件自动调整。
//
// Set Control automatically adjusts.
func (c *TColorListBox) SetAlign(value TAlign) {
	ColorListBox_SetAlign(c._instance(), value)
}

func (c *TColorListBox) DefaultColorColor() TColor {
	return ColorListBox_GetDefaultColorColor(c._instance())
}

func (c *TColorListBox) SetDefaultColorColor(value TColor) {
	ColorListBox_SetDefaultColorColor(c._instance(), value)
}

func (c *TColorListBox) NoneColorColor() TColor {
	return ColorListBox_GetNoneColorColor(c._instance())
}

func (c *TColorListBox) SetNoneColorColor(value TColor) {
	ColorListBox_SetNoneColorColor(c._instance(), value)
}

func (c *TColorListBox) Selected() TColor {
	return ColorListBox_GetSelected(c._instance())
}

func (c *TColorListBox) SetSelected(value TColor) {
	ColorListBox_SetSelected(c._instance(), value)
}

func (c *TColorListBox) Style() TColorBoxStyle {
	return ColorListBox_GetStyle(c._instance())
}

func (c *TColorListBox) SetStyle(value TColorBoxStyle) {
	ColorListBox_SetStyle(c._instance(), value)
}

// Anchors
//
// 获取四个角位置的锚点。
func (c *TColorListBox) Anchors() TAnchors {
	return ColorListBox_GetAnchors(c._instance())
}

// SetAnchors
//
// 设置四个角位置的锚点。
func (c *TColorListBox) SetAnchors(value TAnchors) {
	ColorListBox_SetAnchors(c._instance(), value)
}

func (c *TColorListBox) BiDiMode() TBiDiMode {
	return ColorListBox_GetBiDiMode(c._instance())
}

func (c *TColorListBox) SetBiDiMode(value TBiDiMode) {
	ColorListBox_SetBiDiMode(c._instance(), value)
}

// Color
//
// 获取颜色。
//
// Get color.
func (c *TColorListBox) Color() TColor {
	return ColorListBox_GetColor(c._instance())
}

// SetColor
//
// 设置颜色。
//
// Set color.
func (c *TColorListBox) SetColor(value TColor) {
	ColorListBox_SetColor(c._instance(), value)
}

// Constraints
//
// 获取约束控件大小。
func (c *TColorListBox) Constraints() *TSizeConstraints {
	return AsSizeConstraints(ColorListBox_GetConstraints(c._instance()))
}

// SetConstraints
//
// 设置约束控件大小。
func (c *TColorListBox) SetConstraints(value *TSizeConstraints) {
	ColorListBox_SetConstraints(c._instance(), CheckPtr(value))
}

// DoubleBuffered
//
// 获取设置控件双缓冲。
//
// Get Set control double buffering.
func (c *TColorListBox) DoubleBuffered() bool {
	return ColorListBox_GetDoubleBuffered(c._instance())
}

// SetDoubleBuffered
//
// 设置设置控件双缓冲。
//
// Set Set control double buffering.
func (c *TColorListBox) SetDoubleBuffered(value bool) {
	ColorListBox_SetDoubleBuffered(c._instance(), value)
}

// Enabled
//
// 获取控件启用。
//
// Get the control enabled.
func (c *TColorListBox) Enabled() bool {
	return ColorListBox_GetEnabled(c._instance())
}

// SetEnabled
//
// 设置控件启用。
//
// Set the control enabled.
func (c *TColorListBox) SetEnabled(value bool) {
	ColorListBox_SetEnabled(c._instance(), value)
}

// Font
//
// 获取字体。
//
// Get Font.
func (c *TColorListBox) Font() *TFont {
	return AsFont(ColorListBox_GetFont(c._instance()))
}

// SetFont
//
// 设置字体。
//
// Set Font.
func (c *TColorListBox) SetFont(value *TFont) {
	ColorListBox_SetFont(c._instance(), CheckPtr(value))
}

func (c *TColorListBox) ItemHeight() int32 {
	return ColorListBox_GetItemHeight(c._instance())
}

func (c *TColorListBox) SetItemHeight(value int32) {
	ColorListBox_SetItemHeight(c._instance(), value)
}

// ParentColor
//
// 获取使用父容器颜色。
//
// Get parent color.
func (c *TColorListBox) ParentColor() bool {
	return ColorListBox_GetParentColor(c._instance())
}

// SetParentColor
//
// 设置使用父容器颜色。
//
// Set parent color.
func (c *TColorListBox) SetParentColor(value bool) {
	ColorListBox_SetParentColor(c._instance(), value)
}

// ParentDoubleBuffered
//
// 获取使用父容器双缓冲。
//
// Get Parent container double buffering.
func (c *TColorListBox) ParentDoubleBuffered() bool {
	return ColorListBox_GetParentDoubleBuffered(c._instance())
}

// SetParentDoubleBuffered
//
// 设置使用父容器双缓冲。
//
// Set Parent container double buffering.
func (c *TColorListBox) SetParentDoubleBuffered(value bool) {
	ColorListBox_SetParentDoubleBuffered(c._instance(), value)
}

// ParentFont
//
// 获取使用父容器字体。
//
// Get Parent container font.
func (c *TColorListBox) ParentFont() bool {
	return ColorListBox_GetParentFont(c._instance())
}

// SetParentFont
//
// 设置使用父容器字体。
//
// Set Parent container font.
func (c *TColorListBox) SetParentFont(value bool) {
	ColorListBox_SetParentFont(c._instance(), value)
}

// ParentShowHint
//
// 获取以父容器的ShowHint属性为准。
func (c *TColorListBox) ParentShowHint() bool {
	return ColorListBox_GetParentShowHint(c._instance())
}

// SetParentShowHint
//
// 设置以父容器的ShowHint属性为准。
func (c *TColorListBox) SetParentShowHint(value bool) {
	ColorListBox_SetParentShowHint(c._instance(), value)
}

// PopupMenu
//
// 获取右键菜单。
//
// Get Right click menu.
func (c *TColorListBox) PopupMenu() *TPopupMenu {
	return AsPopupMenu(ColorListBox_GetPopupMenu(c._instance()))
}

// SetPopupMenu
//
// 设置右键菜单。
//
// Set Right click menu.
func (c *TColorListBox) SetPopupMenu(value IComponent) {
	ColorListBox_SetPopupMenu(c._instance(), CheckPtr(value))
}

// ShowHint
//
// 获取显示鼠标悬停提示。
//
// Get Show mouseover tips.
func (c *TColorListBox) ShowHint() bool {
	return ColorListBox_GetShowHint(c._instance())
}

// SetShowHint
//
// 设置显示鼠标悬停提示。
//
// Set Show mouseover tips.
func (c *TColorListBox) SetShowHint(value bool) {
	ColorListBox_SetShowHint(c._instance(), value)
}

// TabOrder
//
// 获取Tab切换顺序序号。
//
// Get Tab switching sequence number.
func (c *TColorListBox) TabOrder() TTabOrder {
	return ColorListBox_GetTabOrder(c._instance())
}

// SetTabOrder
//
// 设置Tab切换顺序序号。
//
// Set Tab switching sequence number.
func (c *TColorListBox) SetTabOrder(value TTabOrder) {
	ColorListBox_SetTabOrder(c._instance(), value)
}

// TabStop
//
// 获取Tab可停留。
//
// Get Tab can stay.
func (c *TColorListBox) TabStop() bool {
	return ColorListBox_GetTabStop(c._instance())
}

// SetTabStop
//
// 设置Tab可停留。
//
// Set Tab can stay.
func (c *TColorListBox) SetTabStop(value bool) {
	ColorListBox_SetTabStop(c._instance(), value)
}

// Visible
//
// 获取控件可视。
//
// Get the control visible.
func (c *TColorListBox) Visible() bool {
	return ColorListBox_GetVisible(c._instance())
}

// SetVisible
//
// 设置控件可视。
//
// Set the control visible.
func (c *TColorListBox) SetVisible(value bool) {
	ColorListBox_SetVisible(c._instance(), value)
}

// SetOnClick
//
// 设置控件单击事件。
//
// Set control click event.
func (c *TColorListBox) SetOnClick(fn TNotifyEvent) {
	ColorListBox_SetOnClick(c._instance(), fn)
}

// SetOnContextPopup
//
// 设置上下文弹出事件，一般是右键时弹出。
//
// Set Context popup event, usually pop up when right click.
func (c *TColorListBox) SetOnContextPopup(fn TContextPopupEvent) {
	ColorListBox_SetOnContextPopup(c._instance(), fn)
}

// SetOnDblClick
//
// 设置双击事件。
func (c *TColorListBox) SetOnDblClick(fn TNotifyEvent) {
	ColorListBox_SetOnDblClick(c._instance(), fn)
}

// SetOnDragDrop
//
// 设置拖拽下落事件。
//
// Set Drag and drop event.
func (c *TColorListBox) SetOnDragDrop(fn TDragDropEvent) {
	ColorListBox_SetOnDragDrop(c._instance(), fn)
}

// SetOnDragOver
//
// 设置拖拽完成事件。
//
// Set Drag and drop completion event.
func (c *TColorListBox) SetOnDragOver(fn TDragOverEvent) {
	ColorListBox_SetOnDragOver(c._instance(), fn)
}

// SetOnEndDrag
//
// 设置拖拽结束。
//
// Set End of drag.
func (c *TColorListBox) SetOnEndDrag(fn TEndDragEvent) {
	ColorListBox_SetOnEndDrag(c._instance(), fn)
}

// SetOnEnter
//
// 设置焦点进入。
//
// Set Focus entry.
func (c *TColorListBox) SetOnEnter(fn TNotifyEvent) {
	ColorListBox_SetOnEnter(c._instance(), fn)
}

// SetOnExit
//
// 设置焦点退出。
//
// Set Focus exit.
func (c *TColorListBox) SetOnExit(fn TNotifyEvent) {
	ColorListBox_SetOnExit(c._instance(), fn)
}

// SetOnKeyDown
//
// 设置键盘按键按下事件。
//
// Set Keyboard button press event.
func (c *TColorListBox) SetOnKeyDown(fn TKeyEvent) {
	ColorListBox_SetOnKeyDown(c._instance(), fn)
}

// SetOnKeyPress
//
// 设置键键下事件。
func (c *TColorListBox) SetOnKeyPress(fn TKeyPressEvent) {
	ColorListBox_SetOnKeyPress(c._instance(), fn)
}

// SetOnKeyUp
//
// 设置键盘按键抬起事件。
//
// Set Keyboard button lift event.
func (c *TColorListBox) SetOnKeyUp(fn TKeyEvent) {
	ColorListBox_SetOnKeyUp(c._instance(), fn)
}

// SetOnMouseDown
//
// 设置鼠标按下事件。
//
// Set Mouse down event.
func (c *TColorListBox) SetOnMouseDown(fn TMouseEvent) {
	ColorListBox_SetOnMouseDown(c._instance(), fn)
}

// SetOnMouseEnter
//
// 设置鼠标进入事件。
//
// Set Mouse entry event.
func (c *TColorListBox) SetOnMouseEnter(fn TNotifyEvent) {
	ColorListBox_SetOnMouseEnter(c._instance(), fn)
}

// SetOnMouseLeave
//
// 设置鼠标离开事件。
//
// Set Mouse leave event.
func (c *TColorListBox) SetOnMouseLeave(fn TNotifyEvent) {
	ColorListBox_SetOnMouseLeave(c._instance(), fn)
}

// SetOnMouseMove
//
// 设置鼠标移动事件。
func (c *TColorListBox) SetOnMouseMove(fn TMouseMoveEvent) {
	ColorListBox_SetOnMouseMove(c._instance(), fn)
}

// SetOnMouseUp
//
// 设置鼠标抬起事件。
//
// Set Mouse lift event.
func (c *TColorListBox) SetOnMouseUp(fn TMouseEvent) {
	ColorListBox_SetOnMouseUp(c._instance(), fn)
}

// Canvas
//
// 获取画布。
func (c *TColorListBox) Canvas() *TCanvas {
	return AsCanvas(ColorListBox_GetCanvas(c._instance()))
}

func (c *TColorListBox) Count() int32 {
	return ColorListBox_GetCount(c._instance())
}

func (c *TColorListBox) Items() *TStrings {
	return AsStrings(ColorListBox_GetItems(c._instance()))
}

func (c *TColorListBox) SetItems(value IStrings) {
	ColorListBox_SetItems(c._instance(), CheckPtr(value))
}

func (c *TColorListBox) TopIndex() int32 {
	return ColorListBox_GetTopIndex(c._instance())
}

func (c *TColorListBox) SetTopIndex(value int32) {
	ColorListBox_SetTopIndex(c._instance(), value)
}

func (c *TColorListBox) MultiSelect() bool {
	return ColorListBox_GetMultiSelect(c._instance())
}

func (c *TColorListBox) SetMultiSelect(value bool) {
	ColorListBox_SetMultiSelect(c._instance(), value)
}

func (c *TColorListBox) SelCount() int32 {
	return ColorListBox_GetSelCount(c._instance())
}

func (c *TColorListBox) ItemIndex() int32 {
	return ColorListBox_GetItemIndex(c._instance())
}

func (c *TColorListBox) SetItemIndex(value int32) {
	ColorListBox_SetItemIndex(c._instance(), value)
}

// DockClientCount
//
// 获取依靠客户端总数。
func (c *TColorListBox) DockClientCount() int32 {
	return ColorListBox_GetDockClientCount(c._instance())
}

// DockSite
//
// 获取停靠站点。
//
// Get Docking site.
func (c *TColorListBox) DockSite() bool {
	return ColorListBox_GetDockSite(c._instance())
}

// SetDockSite
//
// 设置停靠站点。
//
// Set Docking site.
func (c *TColorListBox) SetDockSite(value bool) {
	ColorListBox_SetDockSite(c._instance(), value)
}

// MouseInClient
//
// 获取鼠标是否在客户端，仅VCL有效。
//
// Get Whether the mouse is on the client, only VCL is valid.
func (c *TColorListBox) MouseInClient() bool {
	return ColorListBox_GetMouseInClient(c._instance())
}

// VisibleDockClientCount
//
// 获取当前停靠的可视总数。
//
// Get The total number of visible calls currently docked.
func (c *TColorListBox) VisibleDockClientCount() int32 {
	return ColorListBox_GetVisibleDockClientCount(c._instance())
}

// Brush
//
// 获取画刷对象。
//
// Get Brush.
func (c *TColorListBox) Brush() *TBrush {
	return AsBrush(ColorListBox_GetBrush(c._instance()))
}

// ControlCount
//
// 获取子控件数。
//
// Get Number of child controls.
func (c *TColorListBox) ControlCount() int32 {
	return ColorListBox_GetControlCount(c._instance())
}

// Handle
//
// 获取控件句柄。
//
// Get Control handle.
func (c *TColorListBox) Handle() HWND {
	return ColorListBox_GetHandle(c._instance())
}

// ParentWindow
//
// 获取父容器句柄。
//
// Get Parent container handle.
func (c *TColorListBox) ParentWindow() HWND {
	return ColorListBox_GetParentWindow(c._instance())
}

// SetParentWindow
//
// 设置父容器句柄。
//
// Set Parent container handle.
func (c *TColorListBox) SetParentWindow(value HWND) {
	ColorListBox_SetParentWindow(c._instance(), value)
}

func (c *TColorListBox) Showing() bool {
	return ColorListBox_GetShowing(c._instance())
}

// UseDockManager
//
// 获取使用停靠管理。
func (c *TColorListBox) UseDockManager() bool {
	return ColorListBox_GetUseDockManager(c._instance())
}

// SetUseDockManager
//
// 设置使用停靠管理。
func (c *TColorListBox) SetUseDockManager(value bool) {
	ColorListBox_SetUseDockManager(c._instance(), value)
}

func (c *TColorListBox) Action() *TAction {
	return AsAction(ColorListBox_GetAction(c._instance()))
}

func (c *TColorListBox) SetAction(value IComponent) {
	ColorListBox_SetAction(c._instance(), CheckPtr(value))
}

func (c *TColorListBox) BoundsRect() TRect {
	return ColorListBox_GetBoundsRect(c._instance())
}

func (c *TColorListBox) SetBoundsRect(value TRect) {
	ColorListBox_SetBoundsRect(c._instance(), value)
}

// ClientHeight
//
// 获取客户区高度。
//
// Get client height.
func (c *TColorListBox) ClientHeight() int32 {
	return ColorListBox_GetClientHeight(c._instance())
}

// SetClientHeight
//
// 设置客户区高度。
//
// Set client height.
func (c *TColorListBox) SetClientHeight(value int32) {
	ColorListBox_SetClientHeight(c._instance(), value)
}

func (c *TColorListBox) ClientOrigin() TPoint {
	return ColorListBox_GetClientOrigin(c._instance())
}

// ClientRect
//
// 获取客户区矩形。
//
// Get client rectangle.
func (c *TColorListBox) ClientRect() TRect {
	return ColorListBox_GetClientRect(c._instance())
}

// ClientWidth
//
// 获取客户区宽度。
//
// Get client width.
func (c *TColorListBox) ClientWidth() int32 {
	return ColorListBox_GetClientWidth(c._instance())
}

// SetClientWidth
//
// 设置客户区宽度。
//
// Set client width.
func (c *TColorListBox) SetClientWidth(value int32) {
	ColorListBox_SetClientWidth(c._instance(), value)
}

// ControlState
//
// 获取控件状态。
//
// Get control state.
func (c *TColorListBox) ControlState() TControlState {
	return ColorListBox_GetControlState(c._instance())
}

// SetControlState
//
// 设置控件状态。
//
// Set control state.
func (c *TColorListBox) SetControlState(value TControlState) {
	ColorListBox_SetControlState(c._instance(), value)
}

// ControlStyle
//
// 获取控件样式。
//
// Get control style.
func (c *TColorListBox) ControlStyle() TControlStyle {
	return ColorListBox_GetControlStyle(c._instance())
}

// SetControlStyle
//
// 设置控件样式。
//
// Set control style.
func (c *TColorListBox) SetControlStyle(value TControlStyle) {
	ColorListBox_SetControlStyle(c._instance(), value)
}

func (c *TColorListBox) Floating() bool {
	return ColorListBox_GetFloating(c._instance())
}

// Parent
//
// 获取控件父容器。
//
// Get control parent container.
func (c *TColorListBox) Parent() *TWinControl {
	return AsWinControl(ColorListBox_GetParent(c._instance()))
}

// SetParent
//
// 设置控件父容器。
//
// Set control parent container.
func (c *TColorListBox) SetParent(value IWinControl) {
	ColorListBox_SetParent(c._instance(), CheckPtr(value))
}

// Left
//
// 获取左边位置。
//
// Get Left position.
func (c *TColorListBox) Left() int32 {
	return ColorListBox_GetLeft(c._instance())
}

// SetLeft
//
// 设置左边位置。
//
// Set Left position.
func (c *TColorListBox) SetLeft(value int32) {
	ColorListBox_SetLeft(c._instance(), value)
}

// Top
//
// 获取顶边位置。
//
// Get Top position.
func (c *TColorListBox) Top() int32 {
	return ColorListBox_GetTop(c._instance())
}

// SetTop
//
// 设置顶边位置。
//
// Set Top position.
func (c *TColorListBox) SetTop(value int32) {
	ColorListBox_SetTop(c._instance(), value)
}

// Width
//
// 获取宽度。
//
// Get width.
func (c *TColorListBox) Width() int32 {
	return ColorListBox_GetWidth(c._instance())
}

// SetWidth
//
// 设置宽度。
//
// Set width.
func (c *TColorListBox) SetWidth(value int32) {
	ColorListBox_SetWidth(c._instance(), value)
}

// Height
//
// 获取高度。
//
// Get height.
func (c *TColorListBox) Height() int32 {
	return ColorListBox_GetHeight(c._instance())
}

// SetHeight
//
// 设置高度。
//
// Set height.
func (c *TColorListBox) SetHeight(value int32) {
	ColorListBox_SetHeight(c._instance(), value)
}

// Cursor
//
// 获取控件光标。
//
// Get control cursor.
func (c *TColorListBox) Cursor() TCursor {
	return ColorListBox_GetCursor(c._instance())
}

// SetCursor
//
// 设置控件光标。
//
// Set control cursor.
func (c *TColorListBox) SetCursor(value TCursor) {
	ColorListBox_SetCursor(c._instance(), value)
}

// Hint
//
// 获取组件鼠标悬停提示。
//
// Get component mouse hints.
func (c *TColorListBox) Hint() string {
	return ColorListBox_GetHint(c._instance())
}

// SetHint
//
// 设置组件鼠标悬停提示。
//
// Set component mouse hints.
func (c *TColorListBox) SetHint(value string) {
	ColorListBox_SetHint(c._instance(), value)
}

// ComponentCount
//
// 获取组件总数。
//
// Get the total number of components.
func (c *TColorListBox) ComponentCount() int32 {
	return ColorListBox_GetComponentCount(c._instance())
}

// ComponentIndex
//
// 获取组件索引。
//
// Get component index.
func (c *TColorListBox) ComponentIndex() int32 {
	return ColorListBox_GetComponentIndex(c._instance())
}

// SetComponentIndex
//
// 设置组件索引。
//
// Set component index.
func (c *TColorListBox) SetComponentIndex(value int32) {
	ColorListBox_SetComponentIndex(c._instance(), value)
}

// Owner
//
// 获取组件所有者。
//
// Get component owner.
func (c *TColorListBox) Owner() *TComponent {
	return AsComponent(ColorListBox_GetOwner(c._instance()))
}

// Name
//
// 获取组件名称。
//
// Get the component name.
func (c *TColorListBox) Name() string {
	return ColorListBox_GetName(c._instance())
}

// SetName
//
// 设置组件名称。
//
// Set the component name.
func (c *TColorListBox) SetName(value string) {
	ColorListBox_SetName(c._instance(), value)
}

// Tag
//
// 获取对象标记。
//
// Get the control tag.
func (c *TColorListBox) Tag() int {
	return ColorListBox_GetTag(c._instance())
}

// SetTag
//
// 设置对象标记。
//
// Set the control tag.
func (c *TColorListBox) SetTag(value int) {
	ColorListBox_SetTag(c._instance(), value)
}

// AnchorSideLeft
//
// 获取左边锚点。
func (c *TColorListBox) AnchorSideLeft() *TAnchorSide {
	return AsAnchorSide(ColorListBox_GetAnchorSideLeft(c._instance()))
}

// SetAnchorSideLeft
//
// 设置左边锚点。
func (c *TColorListBox) SetAnchorSideLeft(value *TAnchorSide) {
	ColorListBox_SetAnchorSideLeft(c._instance(), CheckPtr(value))
}

// AnchorSideTop
//
// 获取顶边锚点。
func (c *TColorListBox) AnchorSideTop() *TAnchorSide {
	return AsAnchorSide(ColorListBox_GetAnchorSideTop(c._instance()))
}

// SetAnchorSideTop
//
// 设置顶边锚点。
func (c *TColorListBox) SetAnchorSideTop(value *TAnchorSide) {
	ColorListBox_SetAnchorSideTop(c._instance(), CheckPtr(value))
}

// AnchorSideRight
//
// 获取右边锚点。
func (c *TColorListBox) AnchorSideRight() *TAnchorSide {
	return AsAnchorSide(ColorListBox_GetAnchorSideRight(c._instance()))
}

// SetAnchorSideRight
//
// 设置右边锚点。
func (c *TColorListBox) SetAnchorSideRight(value *TAnchorSide) {
	ColorListBox_SetAnchorSideRight(c._instance(), CheckPtr(value))
}

// AnchorSideBottom
//
// 获取底边锚点。
func (c *TColorListBox) AnchorSideBottom() *TAnchorSide {
	return AsAnchorSide(ColorListBox_GetAnchorSideBottom(c._instance()))
}

// SetAnchorSideBottom
//
// 设置底边锚点。
func (c *TColorListBox) SetAnchorSideBottom(value *TAnchorSide) {
	ColorListBox_SetAnchorSideBottom(c._instance(), CheckPtr(value))
}

func (c *TColorListBox) ChildSizing() *TControlChildSizing {
	return AsControlChildSizing(ColorListBox_GetChildSizing(c._instance()))
}

func (c *TColorListBox) SetChildSizing(value *TControlChildSizing) {
	ColorListBox_SetChildSizing(c._instance(), CheckPtr(value))
}

// BorderSpacing
//
// 获取边框间距。
func (c *TColorListBox) BorderSpacing() *TControlBorderSpacing {
	return AsControlBorderSpacing(ColorListBox_GetBorderSpacing(c._instance()))
}

// SetBorderSpacing
//
// 设置边框间距。
func (c *TColorListBox) SetBorderSpacing(value *TControlBorderSpacing) {
	ColorListBox_SetBorderSpacing(c._instance(), CheckPtr(value))
}

func (c *TColorListBox) Colors(Index int32) TColor {
	return ColorListBox_GetColors(c._instance(), Index)
}

func (c *TColorListBox) ColorNames(Index int32) string {
	return ColorListBox_GetColorNames(c._instance(), Index)
}

// DockClients
//
// 获取指定索引停靠客户端。
func (c *TColorListBox) DockClients(Index int32) *TControl {
	return AsControl(ColorListBox_GetDockClients(c._instance(), Index))
}

// Controls
//
// 获取指定索引子控件。
func (c *TColorListBox) Controls(Index int32) *TControl {
	return AsControl(ColorListBox_GetControls(c._instance(), Index))
}

// Components
//
// 获取指定索引组件。
//
// Get the specified index component.
func (c *TColorListBox) Components(AIndex int32) *TComponent {
	return AsComponent(ColorListBox_GetComponents(c._instance(), AIndex))
}

// AnchorSide
//
// 获取锚侧面。
func (c *TColorListBox) AnchorSide(AKind TAnchorKind) *TAnchorSide {
	return AsAnchorSide(ColorListBox_GetAnchorSide(c._instance(), AKind))
}
