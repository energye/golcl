//----------------------------------------
// The code is automatically generated by the GenlibLcl tool.
// Copyright © ying32. All Rights Reserved.
//
// Licensed under Apache License 2.0
//
//----------------------------------------

package lcl

import (
	. "github.com/energye/golcl/lcl/api"
	. "github.com/energye/golcl/lcl/types"
	"unsafe"
)

type THeaderSections struct {
	IObject
	instance unsafe.Pointer
}

// NewHeaderSections
//
// 创建一个新的对象。
//
// Create a new object.
func NewHeaderSections(AOwner *THeaderControl) *THeaderSections {
	h := new(THeaderSections)
	h.instance = unsafe.Pointer(HeaderSections_Create(CheckPtr(AOwner)))
	setFinalizer(h, (*THeaderSections).Free)
	return h
}

// AsHeaderSections
//
// 动态转换一个已存在的对象实例。
//
// Dynamically convert an existing object instance.
func AsHeaderSections(obj interface{}) *THeaderSections {
	instance := getInstance(obj)
	if instance == nullptr {
		return nil
	}
	return &THeaderSections{instance: instance}
}

// Free
//
// 释放对象。
//
// Free object.
func (h *THeaderSections) Free() {
	if h.instance != nullptr {
		HeaderSections_Free(h._instance())
		h.instance = nullptr
	}
}

func (h *THeaderSections) _instance() uintptr {
	return uintptr(h.instance)
}

// Instance
//
// 返回对象实例指针。
//
// Return object instance pointer.
func (h *THeaderSections) Instance() uintptr {
	return h._instance()
}

// UnsafeAddr
//
// 获取一个不安全的地址。
//
// Get an unsafe address.
func (h *THeaderSections) UnsafeAddr() unsafe.Pointer {
	return h.instance
}

// IsValid
//
// 检测地址是否为空。
//
// Check if the address is empty.
func (h *THeaderSections) IsValid() bool {
	return h.instance != nullptr
}

// Is
//
// 检测当前对象是否继承自目标对象。
//
// Checks whether the current object is inherited from the target object.
func (h *THeaderSections) Is() TIs {
	return TIs(h._instance())
}

// As
//
// 动态转换当前对象为目标对象。
//
// Dynamically convert the current object to the target object.
//func (h *THeaderSections) As() TAs {
//    return TAs(h._instance())
//}

// THeaderSectionsClass
//
// 获取类信息指针。
//
// Get class information pointer.
func THeaderSectionsClass() TClass {
	return HeaderSections_StaticClassType()
}

func (h *THeaderSections) Add() *THeaderSection {
	return AsHeaderSection(HeaderSections_Add(h._instance()))
}

func (h *THeaderSections) AddItem(Item *THeaderSection, Index int32) *THeaderSection {
	return AsHeaderSection(HeaderSections_AddItem(h._instance(), CheckPtr(Item), Index))
}

func (h *THeaderSections) Insert(Index int32) *THeaderSection {
	return AsHeaderSection(HeaderSections_Insert(h._instance(), Index))
}

// Owner
//
// 组件所有者。
//
// component owner.
func (h *THeaderSections) Owner() *TObject {
	return AsObject(HeaderSections_Owner(h._instance()))
}

// Assign
//
// 复制一个对象，如果对象实现了此方法的话。
//
// Copy an object, if the object implements this method.
func (h *THeaderSections) Assign(Source IObject) {
	HeaderSections_Assign(h._instance(), CheckPtr(Source))
}

func (h *THeaderSections) BeginUpdate() {
	HeaderSections_BeginUpdate(h._instance())
}

// Clear
//
// 清除。
func (h *THeaderSections) Clear() {
	HeaderSections_Clear(h._instance())
}

func (h *THeaderSections) Delete(Index int32) {
	HeaderSections_Delete(h._instance(), Index)
}

func (h *THeaderSections) EndUpdate() {
	HeaderSections_EndUpdate(h._instance())
}

func (h *THeaderSections) FindItemID(ID int32) *TCollectionItem {
	return AsCollectionItem(HeaderSections_FindItemID(h._instance(), ID))
}

// GetNamePath
//
// 获取类名路径。
//
// Get the class name path.
func (h *THeaderSections) GetNamePath() string {
	return HeaderSections_GetNamePath(h._instance())
}

// ClassType
//
// 获取类的类型信息。
//
// Get class type information.
func (h *THeaderSections) ClassType() TClass {
	return HeaderSections_ClassType(h._instance())
}

// ClassName
//
// 获取当前对象类名称。
//
// Get the current object class name.
func (h *THeaderSections) ClassName() string {
	return HeaderSections_ClassName(h._instance())
}

// InstanceSize
//
// 获取当前对象实例大小。
//
// Get the current object instance size.
func (h *THeaderSections) InstanceSize() int32 {
	return HeaderSections_InstanceSize(h._instance())
}

// InheritsFrom
//
// 判断当前类是否继承自指定类。
//
// Determine whether the current class inherits from the specified class.
func (h *THeaderSections) InheritsFrom(AClass TClass) bool {
	return HeaderSections_InheritsFrom(h._instance(), AClass)
}

// Equals
//
// 与一个对象进行比较。
//
// Compare with an object.
func (h *THeaderSections) Equals(Obj IObject) bool {
	return HeaderSections_Equals(h._instance(), CheckPtr(Obj))
}

// GetHashCode
//
// 获取类的哈希值。
//
// Get the hash value of the class.
func (h *THeaderSections) GetHashCode() int32 {
	return HeaderSections_GetHashCode(h._instance())
}

// ToString
//
// 文本类信息。
//
// Text information.
func (h *THeaderSections) ToString() string {
	return HeaderSections_ToString(h._instance())
}

func (h *THeaderSections) Count() int32 {
	return HeaderSections_GetCount(h._instance())
}

func (h *THeaderSections) Items(Index int32) *THeaderSection {
	return AsHeaderSection(HeaderSections_GetItems(h._instance(), Index))
}

func (h *THeaderSections) SetItems(Index int32, value *THeaderSection) {
	HeaderSections_SetItems(h._instance(), Index, CheckPtr(value))
}
